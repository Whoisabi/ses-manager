// Prisma schema for ses-manager
// Save as prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  password         String
  first_name       String?
  last_name        String?
  profile_image_url String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  aws_credentials  AwsCredential[]
  email_templates  EmailTemplate[]
  recipient_lists  RecipientList[]
  email_campaigns  EmailCampaign[]
  
  @@map("users")
}

model AwsCredential {
  id                 String   @id @default(uuid())
  user_id            String
  region             String
  encrypted_access_key String
  encrypted_secret_key String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  user               User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("aws_credentials")
}

model EmailTemplate {
  id         String   @id @default(uuid())
  user_id    String
  name       String
  subject    String
  content    String
  variables  String[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  campaigns  EmailCampaign[] @relation("TemplateToCampaign")
  
  @@map("email_templates")
}

model RecipientList {
  id          String   @id @default(uuid())
  user_id     String
  name        String
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  recipients  Recipient[]
  campaigns   EmailCampaign[] @relation("RecipientListToCampaign")
  
  @@map("recipient_lists")
}

model Recipient {
  id         String   @id @default(uuid())
  list_id    String
  email      String
  first_name String?
  last_name  String?
  metadata   Json?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  list       RecipientList @relation(fields: [list_id], references: [id], onDelete: Cascade)
  
  @@map("recipients")
}

model EmailCampaign {
  id               String   @id @default(uuid())
  user_id          String
  name             String
  subject          String
  content          String
  template_id      String?
  recipient_list_id String?
  status           String   @default("draft")
  scheduled_at     DateTime?
  sent_at          DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  template         EmailTemplate? @relation(fields: [template_id], references: [id], name: "TemplateToCampaign")
  recipient_list   RecipientList? @relation(fields: [recipient_list_id], references: [id], name: "RecipientListToCampaign")
  email_sends      EmailSend[]
  
  @@map("email_campaigns")
}

model EmailSend {
  id               String   @id @default(uuid())
  campaign_id      String
  recipient_email  String
  subject          String
  content          String
  status           String   @default("pending")
  message_id       String?
  sent_at          DateTime?
  delivered_at     DateTime?
  opened_at        DateTime?
  clicked_at       DateTime?
  bounced_at       DateTime?
  complained_at    DateTime?
  bounce_reason    String?
  complaint_reason String?
  tracking_pixel_id String?
  created_at       DateTime @default(now())
  campaign         EmailCampaign @relation(fields: [campaign_id], references: [id], onDelete: Cascade)
  tracking_events  EmailTrackingEvent[]
  
  @@map("email_sends")
}

model EmailTrackingEvent {
  id            String   @id @default(uuid())
  email_send_id String
  event_type    String
  event_data    Json?
  timestamp     DateTime @default(now())
  email_send    EmailSend @relation(fields: [email_send_id], references: [id], onDelete: Cascade)
  
  @@map("email_tracking_events")
}

model Session {
  sid     String   @id
  sess    Json
  expire  DateTime
  @@index([expire], name: "IDX_session_expire")
  
  @@map("sessions")
}
