{"file_contents":{"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"server/services/awsService.ts":{"content":"import { SESClient, SendEmailCommand, SendBulkTemplatedEmailCommand, CreateTemplateCommand, DeleteTemplateCommand, ListTemplatesCommand, ListIdentitiesCommand, GetIdentityVerificationAttributesCommand, VerifyDomainIdentityCommand, VerifyEmailIdentityCommand, VerifyDomainDkimCommand, DeleteIdentityCommand, GetSendQuotaCommand, GetIdentityDkimAttributesCommand } from '@aws-sdk/client-ses';\nimport { storage } from '../storage';\nimport { decrypt } from './encryptionService';\n\nexport interface AWSConfig {\n  region: string;\n  accessKeyId: string;\n  secretAccessKey: string;\n}\n\nexport interface SendEmailOptions {\n  to: string[];\n  subject: string;\n  htmlBody: string;\n  textBody?: string;\n  from?: string;\n}\n\nexport interface SendBulkEmailOptions {\n  templateName: string;\n  from: string;\n  destinations: Array<{\n    email: string;\n    templateData: Record<string, string>;\n  }>;\n}\n\nexport class AWSService {\n  private sesClient: SESClient | null = null;\n\n  async initialize(userId: string): Promise<void> {\n    const credentials = await storage.getAwsCredentials(userId);\n    if (!credentials) {\n      throw new Error('AWS credentials not configured. Please go to Settings to add your AWS access keys, secret keys, and region. You also need to verify your sending email address in AWS SES.');\n    }\n\n    try {\n      const accessKeyId = decrypt(credentials.encryptedAccessKey);\n      const secretAccessKey = decrypt(credentials.encryptedSecretKey);\n\n      this.sesClient = new SESClient({\n        region: credentials.region,\n        credentials: {\n          accessKeyId,\n          secretAccessKey,\n        },\n      });\n    } catch (error) {\n      throw new Error('Failed to decrypt AWS credentials. Please reconfigure your credentials.');\n    }\n  }\n\n  private ensureInitialized(): SESClient {\n    if (!this.sesClient) {\n      throw new Error('AWS service not initialized. Call initialize() first.');\n    }\n    return this.sesClient;\n  }\n\n  async validateCredentials(config: AWSConfig): Promise<boolean> {\n    try {\n      const sesClient = new SESClient({\n        region: config.region,\n        credentials: {\n          accessKeyId: config.accessKeyId,\n          secretAccessKey: config.secretAccessKey,\n        },\n      });\n\n      // Test the credentials by listing templates\n      await sesClient.send(new ListTemplatesCommand({}));\n      return true;\n    } catch (error) {\n      console.error('AWS credentials validation failed:', error);\n      return false;\n    }\n  }\n\n  async sendEmail(options: SendEmailOptions): Promise<string> {\n    const sesClient = this.ensureInitialized();\n\n    // Validate that 'from' email is provided\n    const fromEmail = options.from || process.env.AWS_SES_FROM_EMAIL;\n    if (!fromEmail) {\n      throw new Error('From email address is required. Please provide a verified sender email address.');\n    }\n\n    // Validate that the sender email is verified in AWS SES\n    await this.validateSenderIdentity(fromEmail);\n\n    const command = new SendEmailCommand({\n      Source: fromEmail,\n      Destination: {\n        ToAddresses: options.to,\n      },\n      Message: {\n        Subject: {\n          Data: options.subject,\n          Charset: 'UTF-8',\n        },\n        Body: {\n          Html: {\n            Data: options.htmlBody,\n            Charset: 'UTF-8',\n          },\n          ...(options.textBody && {\n            Text: {\n              Data: options.textBody,\n              Charset: 'UTF-8',\n            },\n          }),\n        },\n      },\n    });\n\n    const response = await sesClient.send(command);\n    return response.MessageId!;\n  }\n\n  async sendBulkEmail(options: SendBulkEmailOptions): Promise<string[]> {\n    const sesClient = this.ensureInitialized();\n\n    const command = new SendBulkTemplatedEmailCommand({\n      Source: options.from,\n      Template: options.templateName,\n      DefaultTemplateData: JSON.stringify({}),\n      Destinations: options.destinations.map(dest => ({\n        Destination: {\n          ToAddresses: [dest.email],\n        },\n        ReplacementTemplateData: JSON.stringify(dest.templateData),\n      })),\n    });\n\n    const response = await sesClient.send(command);\n    return response.Status ? response.Status.map((_, i) => `bulk-${i}`) : [];\n  }\n\n  async createTemplate(name: string, subject: string, htmlPart: string, textPart?: string): Promise<void> {\n    const sesClient = this.ensureInitialized();\n\n    const command = new CreateTemplateCommand({\n      Template: {\n        TemplateName: name,\n        SubjectPart: subject,\n        HtmlPart: htmlPart,\n        TextPart: textPart,\n      },\n    });\n\n    await sesClient.send(command);\n  }\n\n  async deleteTemplate(name: string): Promise<void> {\n    const sesClient = this.ensureInitialized();\n\n    const command = new DeleteTemplateCommand({\n      TemplateName: name,\n    });\n\n    await sesClient.send(command);\n  }\n\n  async validateSenderIdentity(email: string): Promise<void> {\n    const sesClient = this.ensureInitialized();\n\n    try {\n      // Extract domain from email for domain-level verification check\n      const domain = email.split('@')[1];\n      const identities = [email];\n      \n      // Also check the domain if it's different from the email\n      if (domain && !identities.includes(domain)) {\n        identities.push(domain);\n      }\n\n      // Get verification attributes for both email and domain\n      const command = new GetIdentityVerificationAttributesCommand({\n        Identities: identities\n      });\n      \n      const response = await sesClient.send(command);\n      \n      if (!response.VerificationAttributes) {\n        throw new Error(`Email address \"${email}\" is not verified in AWS SES. Please verify your sender email address or domain \"${domain}\" in the AWS SES console before sending emails.`);\n      }\n      \n      // Check if either the exact email OR the domain is verified\n      const emailVerification = response.VerificationAttributes[email];\n      const domainVerification = response.VerificationAttributes[domain];\n      \n      const isEmailVerified = emailVerification?.VerificationStatus === 'Success';\n      const isDomainVerified = domainVerification?.VerificationStatus === 'Success';\n      \n      if (!isEmailVerified && !isDomainVerified) {\n        throw new Error(`Email address \"${email}\" and domain \"${domain}\" are not verified in AWS SES. Please verify either your sender email address or domain in the AWS SES console before sending emails.`);\n      }\n      \n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error(`Unable to verify sender email address \"${email}\". Please check your AWS SES configuration.`);\n    }\n  }\n\n  async getVerifiedIdentities(): Promise<string[]> {\n    const sesClient = this.ensureInitialized();\n\n    try {\n      // First, list all identities\n      const listCommand = new ListIdentitiesCommand({});\n      const listResponse = await sesClient.send(listCommand);\n      \n      const allIdentities = listResponse.Identities || [];\n      \n      if (allIdentities.length === 0) {\n        return [];\n      }\n\n      // Then, get verification attributes for all identities\n      const verificationCommand = new GetIdentityVerificationAttributesCommand({\n        Identities: allIdentities\n      });\n      \n      const verificationResponse = await sesClient.send(verificationCommand);\n      \n      // Filter to only return verified identities\n      const verifiedIdentities: string[] = [];\n      \n      for (const identity of allIdentities) {\n        const verificationStatus = verificationResponse.VerificationAttributes?.[identity];\n        if (verificationStatus?.VerificationStatus === 'Success') {\n          verifiedIdentities.push(identity);\n        }\n      }\n      \n      return verifiedIdentities;\n    } catch (error) {\n      console.error('Failed to list verified identities:', error);\n      return [];\n    }\n  }\n\n  async verifyDomainIdentity(domain: string): Promise<{ verificationToken: string; dkimTokens: string[] }> {\n    const sesClient = this.ensureInitialized();\n    \n    const verifyCommand = new VerifyDomainIdentityCommand({\n      Domain: domain\n    });\n    \n    const verifyResponse = await sesClient.send(verifyCommand);\n    \n    const dkimCommand = new VerifyDomainDkimCommand({\n      Domain: domain\n    });\n    \n    const dkimResponse = await sesClient.send(dkimCommand);\n    \n    return {\n      verificationToken: verifyResponse.VerificationToken!,\n      dkimTokens: dkimResponse.DkimTokens || []\n    };\n  }\n\n  async verifyEmailIdentity(email: string): Promise<void> {\n    const sesClient = this.ensureInitialized();\n    \n    const command = new VerifyEmailIdentityCommand({\n      EmailAddress: email\n    });\n    \n    await sesClient.send(command);\n  }\n\n  async getDomainDkimTokens(domain: string): Promise<string[]> {\n    const sesClient = this.ensureInitialized();\n    \n    const command = new GetIdentityDkimAttributesCommand({\n      Identities: [domain]\n    });\n    \n    const response = await sesClient.send(command);\n    const dkimAttributes = response.DkimAttributes?.[domain];\n    return dkimAttributes?.DkimTokens || [];\n  }\n\n  async getAllIdentitiesWithStatus(): Promise<Array<{\n    identity: string;\n    type: 'email' | 'domain';\n    status: string;\n    verificationToken?: string;\n    dkimTokens?: string[];\n  }>> {\n    const sesClient = this.ensureInitialized();\n\n    try {\n      const listCommand = new ListIdentitiesCommand({});\n      const listResponse = await sesClient.send(listCommand);\n      \n      const allIdentities = listResponse.Identities || [];\n      \n      if (allIdentities.length === 0) {\n        return [];\n      }\n\n      const verificationCommand = new GetIdentityVerificationAttributesCommand({\n        Identities: allIdentities\n      });\n      \n      const verificationResponse = await sesClient.send(verificationCommand);\n      \n      const results = [];\n      \n      for (const identity of allIdentities) {\n        const verificationStatus = verificationResponse.VerificationAttributes?.[identity];\n        const type = identity.includes('@') ? 'email' : 'domain';\n        \n        const result: any = {\n          identity,\n          type,\n          status: verificationStatus?.VerificationStatus || 'Pending'\n        };\n\n        if (type === 'domain' && verificationStatus?.VerificationToken) {\n          result.verificationToken = verificationStatus.VerificationToken;\n        }\n\n        results.push(result);\n      }\n      \n      return results;\n    } catch (error) {\n      console.error('Failed to get identities with status:', error);\n      return [];\n    }\n  }\n\n  async deleteIdentity(identity: string): Promise<void> {\n    const sesClient = this.ensureInitialized();\n    \n    const command = new DeleteIdentityCommand({\n      Identity: identity\n    });\n    \n    await sesClient.send(command);\n  }\n\n  async getSendingQuota(): Promise<{\n    max24HourSend: number;\n    maxSendRate: number;\n    sentLast24Hours: number;\n  }> {\n    const sesClient = this.ensureInitialized();\n    \n    const command = new GetSendQuotaCommand({});\n    const response = await sesClient.send(command);\n    \n    return {\n      max24HourSend: response.Max24HourSend || 0,\n      maxSendRate: response.MaxSendRate || 0,\n      sentLast24Hours: response.SentLast24Hours || 0\n    };\n  }\n}\n\nexport const awsService = new AWSService();\n","size_bytes":11310},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"README-LOCAL-SETUP.md":{"content":"# Local Development Setup - Windows\n\n## Prerequisites\n\n1. **Node.js 18+** installed\n2. **PostgreSQL 12+** installed locally OR access to a cloud PostgreSQL database\n\n## Quick Setup Steps\n\n### 1. Install Dependencies\n```bash\nnpm install\n```\n\n### 2. Database Setup\n\n**Option A: Local PostgreSQL**\n1. Install PostgreSQL on Windows: https://www.postgresql.org/download/windows/\n2. Create a database named `ses_manager`:\n   ```sql\n   CREATE DATABASE ses_manager;\n   ```\n3. Create a `.env` file (copy from `.env.example`):\n   ```\n   DATABASE_URL=\"postgresql://postgres:your_password@localhost:5432/ses_manager\"\n   SESSION_SECRET=\"your-random-secret-key-here\"\n   ```\n\n**Option B: Free Cloud Database (Neon, Supabase, etc.)**\n1. Create a free PostgreSQL database at:\n   - [Neon.tech](https://neon.tech) (recommended)\n   - [Supabase](https://supabase.com)\n   - [ElephantSQL](https://www.elephantsql.com)\n2. Copy the connection string to `.env`:\n   ```\n   DATABASE_URL=\"postgresql://username:password@host:port/database?sslmode=require\"\n   SESSION_SECRET=\"your-random-secret-key-here\"\n   ```\n\n### 3. Initialize Database Schema\n```bash\nnpm run db:push\n```\n\n### 4. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will be available at `http://localhost:5000`\n\n## Troubleshooting\n\n**Database Connection Issues:**\n- Make sure PostgreSQL is running (if using local setup)\n- Verify DATABASE_URL format is correct\n- Check username, password, and database name\n\n**Port Issues:**\n- Default port is 5000, make sure it's not in use\n- Check Windows Firewall settings if needed\n\n**PowerShell Script Execution:**\nIf you get execution policy errors, run:\n```powershell\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n```","size_bytes":1733},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/pages/analytics.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Download, TrendingUp, TrendingDown, Mail, Eye, MousePointer, AlertTriangle, CheckCircle } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, LineChart, Line, PieChart, Pie, Cell, Legend } from \"recharts\";\nimport type { EmailStats } from \"@/lib/types\";\n\nexport default function Analytics() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [timeRange, setTimeRange] = useState(\"7\");\n  const [selectedCampaign, setSelectedCampaign] = useState<string>(\"\");\n\n  const { data: stats } = useQuery<EmailStats>({\n    queryKey: [\"/api/analytics/stats\"],\n    enabled: !!user,\n  });\n\n  const { data: emailSends } = useQuery({\n    queryKey: [\"/api/email-sends\"],\n    enabled: !!user,\n  });\n\n  const { data: campaigns } = useQuery({\n    queryKey: [\"/api/campaigns\"],\n    enabled: !!user,\n  });\n\n  const { data: timeseriesData } = useQuery<Array<{\n    date: string;\n    sent: number;\n    delivered: number;\n    opened: number;\n    clicked: number;\n    bounced: number;\n    complained: number;\n  }>>({\n    queryKey: [\"/api/analytics/timeseries\", { \n      days: parseInt(timeRange), \n      ...(selectedCampaign && { campaignId: selectedCampaign })\n    }],\n    enabled: !!user,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Calculate rates\n  const deliveryRate = stats?.totalSent ? ((stats.totalDelivered / stats.totalSent) * 100).toFixed(1) : \"0\";\n  const openRate = stats?.totalDelivered ? ((stats.totalOpened / stats.totalDelivered) * 100).toFixed(1) : \"0\";\n  const clickRate = stats?.totalOpened ? ((stats.totalClicked / stats.totalOpened) * 100).toFixed(1) : \"0\";\n  const bounceRate = stats?.totalSent ? ((stats.totalBounced / stats.totalSent) * 100).toFixed(1) : \"0\";\n\n  // Chart data\n  const overviewData = [\n    { name: \"Sent\", value: stats?.totalSent || 0, color: \"#3b82f6\" },\n    { name: \"Delivered\", value: stats?.totalDelivered || 0, color: \"#10b981\" },\n    { name: \"Opened\", value: stats?.totalOpened || 0, color: \"#8b5cf6\" },\n    { name: \"Clicked\", value: stats?.totalClicked || 0, color: \"#f59e0b\" },\n    { name: \"Bounced\", value: stats?.totalBounced || 0, color: \"#ef4444\" },\n  ];\n\n  const engagementData = [\n    { name: \"Delivered\", value: stats?.totalDelivered || 0, color: \"#10b981\" },\n    { name: \"Opened\", value: stats?.totalOpened || 0, color: \"#8b5cf6\" },\n    { name: \"Clicked\", value: stats?.totalClicked || 0, color: \"#f59e0b\" },\n    { name: \"Bounced\", value: stats?.totalBounced || 0, color: \"#ef4444\" },\n    { name: \"Complained\", value: stats?.totalComplained || 0, color: \"#dc2626\" },\n  ];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Analytics\" \n          description=\"Monitor your email campaign performance and engagement metrics\"\n          action={\n            <div className=\"flex items-center space-x-2\">\n              <Select value={selectedCampaign} onValueChange={setSelectedCampaign} data-testid=\"select-campaign\">\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All campaigns\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">All campaigns</SelectItem>\n                  {(campaigns as any[])?.map((campaign: any) => (\n                    <SelectItem key={campaign.id} value={campaign.id}>{campaign.name}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select value={timeRange} onValueChange={setTimeRange} data-testid=\"select-time-range\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"7\">Last 7 days</SelectItem>\n                  <SelectItem value=\"30\">Last 30 days</SelectItem>\n                  <SelectItem value=\"90\">Last 90 days</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\" data-testid=\"button-export\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          }\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Key Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Total Sent</CardTitle>\n                <Mail className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-total-sent\">\n                  {stats?.totalSent?.toLocaleString() || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  All time email sends\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Delivery Rate</CardTitle>\n                <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-delivery-rate\">\n                  {deliveryRate}%\n                </div>\n                <p className=\"text-xs text-muted-foreground flex items-center\">\n                  <TrendingUp className=\"w-3 h-3 mr-1 text-green-600\" />\n                  {stats?.totalDelivered?.toLocaleString() || 0} delivered\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Open Rate</CardTitle>\n                <Eye className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-open-rate\">\n                  {openRate}%\n                </div>\n                <p className=\"text-xs text-muted-foreground flex items-center\">\n                  <TrendingUp className=\"w-3 h-3 mr-1 text-green-600\" />\n                  {stats?.totalOpened?.toLocaleString() || 0} opens\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Bounce Rate</CardTitle>\n                <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"stat-bounce-rate\">\n                  {bounceRate}%\n                </div>\n                <p className=\"text-xs text-muted-foreground flex items-center\">\n                  <TrendingDown className=\"w-3 h-3 mr-1 text-red-600\" />\n                  {stats?.totalBounced?.toLocaleString() || 0} bounces\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Charts */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Email Performance Over Time</CardTitle>\n                <CardDescription>\n                  Track your email activity and engagement trends\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={400}>\n                  <LineChart data={timeseriesData || []}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                      dataKey=\"date\" \n                      tickFormatter={(value) => {\n                        const date = new Date(value);\n                        return `${date.getMonth() + 1}/${date.getDate()}`;\n                      }}\n                    />\n                    <YAxis />\n                    <Tooltip \n                      labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                    />\n                    <Legend />\n                    <Line type=\"monotone\" dataKey=\"sent\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Sent\" />\n                    <Line type=\"monotone\" dataKey=\"delivered\" stroke=\"#10b981\" strokeWidth={2} name=\"Delivered\" />\n                    <Line type=\"monotone\" dataKey=\"opened\" stroke=\"#8b5cf6\" strokeWidth={2} name=\"Opened\" />\n                    <Line type=\"monotone\" dataKey=\"clicked\" stroke=\"#f59e0b\" strokeWidth={2} name=\"Clicked\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Delivery & Engagement Rates</CardTitle>\n                  <CardDescription>\n                    Track delivery and engagement rates over time\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={timeseriesData?.map(d => ({\n                      date: d.date,\n                      deliveryRate: d.sent > 0 ? (d.delivered / d.sent * 100).toFixed(1) : 0,\n                      openRate: d.delivered > 0 ? (d.opened / d.delivered * 100).toFixed(1) : 0,\n                      clickRate: d.opened > 0 ? (d.clicked / d.opened * 100).toFixed(1) : 0,\n                    })) || []}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        tickFormatter={(value) => {\n                          const date = new Date(value);\n                          return `${date.getMonth() + 1}/${date.getDate()}`;\n                        }}\n                      />\n                      <YAxis unit=\"%\" />\n                      <Tooltip \n                        labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                        formatter={(value) => [`${value}%`, '']}\n                      />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"deliveryRate\" stroke=\"#10b981\" strokeWidth={2} name=\"Delivery Rate\" />\n                      <Line type=\"monotone\" dataKey=\"openRate\" stroke=\"#8b5cf6\" strokeWidth={2} name=\"Open Rate\" />\n                      <Line type=\"monotone\" dataKey=\"clickRate\" stroke=\"#f59e0b\" strokeWidth={2} name=\"Click Rate\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Issues & Complaints</CardTitle>\n                  <CardDescription>\n                    Monitor bounces and complaints over time\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <LineChart data={timeseriesData || []}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis \n                        dataKey=\"date\" \n                        tickFormatter={(value) => {\n                          const date = new Date(value);\n                          return `${date.getMonth() + 1}/${date.getDate()}`;\n                        }}\n                      />\n                      <YAxis />\n                      <Tooltip \n                        labelFormatter={(value) => new Date(value).toLocaleDateString()}\n                      />\n                      <Legend />\n                      <Line type=\"monotone\" dataKey=\"bounced\" stroke=\"#ef4444\" strokeWidth={2} name=\"Bounces\" />\n                      <Line type=\"monotone\" dataKey=\"complained\" stroke=\"#dc2626\" strokeWidth={2} name=\"Complaints\" />\n                    </LineChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Detailed Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Performance Metrics</CardTitle>\n                <CardDescription>\n                  Key email performance indicators\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Click-through Rate</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"metric-ctr\">\n                    {clickRate}%\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Complaint Rate</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"metric-complaint-rate\">\n                    {stats?.totalSent ? ((stats.totalComplained / stats.totalSent) * 100).toFixed(2) : \"0\"}%\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Total Clicks</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"metric-total-clicks\">\n                    {stats?.totalClicked?.toLocaleString() || 0}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium\">Total Complaints</span>\n                  <span className=\"text-sm text-muted-foreground\" data-testid=\"metric-total-complaints\">\n                    {stats?.totalComplained?.toLocaleString() || 0}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Activity</CardTitle>\n                <CardDescription>\n                  Latest email sending activity\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {!emailSends || (emailSends as any[]).length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Mail className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-muted-foreground\">No recent activity</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {(emailSends as any[]).slice(0, 5).map((send: any) => (\n                      <div key={send.id} className=\"flex items-center justify-between py-2 border-b border-border last:border-b-0\">\n                        <div>\n                          <p className=\"text-sm font-medium truncate max-w-[200px]\">{send.subject}</p>\n                          <p className=\"text-xs text-muted-foreground\">{send.recipientEmail}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${\n                            send.status === 'delivered' ? 'bg-green-100 text-green-800' :\n                            send.status === 'sent' ? 'bg-blue-100 text-blue-800' :\n                            send.status === 'bounced' ? 'bg-red-100 text-red-800' :\n                            send.status === 'complained' ? 'bg-red-100 text-red-800' :\n                            'bg-gray-100 text-gray-800'\n                          }`}>\n                            {send.status}\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            {send.sentAt ? new Date(send.sentAt).toLocaleDateString() : 'Pending'}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":17614},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/layout/header.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus } from \"lucide-react\";\nimport CredentialsModal from \"@/components/aws/credentials-modal\";\n\ninterface HeaderProps {\n  title: string;\n  description: string;\n  action?: ReactNode;\n}\n\nexport default function Header({ title, description, action }: HeaderProps) {\n  const [isCredentialsModalOpen, setIsCredentialsModalOpen] = useState(false);\n  const { data: awsCredentials } = useQuery({\n    queryKey: [\"/api/aws/credentials\"],\n  });\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h2 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-page-title\">\n            {title}\n          </h2>\n          <p className=\"text-muted-foreground\" data-testid=\"text-page-description\">\n            {description}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          {/* AWS Connection Status - Clickable */}\n          <button \n            onClick={() => setIsCredentialsModalOpen(true)}\n            className=\"flex items-center space-x-2 bg-accent hover:bg-accent/80 px-3 py-2 rounded-md transition-colors cursor-pointer\"\n            data-testid=\"button-aws-connection-status\"\n          >\n            <div \n              className={`w-2 h-2 rounded-full ${\n                (awsCredentials as any)?.connected ? 'bg-green-500' : 'bg-red-500'\n              }`} \n            />\n            <span className=\"text-sm font-medium\">\n              {(awsCredentials as any)?.connected ? 'AWS Connected' : 'AWS Disconnected'}\n            </span>\n          </button>\n          \n          {/* Custom Action */}\n          {action}\n        </div>\n      </div>\n      \n      {/* AWS Credentials Modal */}\n      <CredentialsModal \n        open={isCredentialsModalOpen} \n        onOpenChange={setIsCredentialsModalOpen} \n      />\n    </header>\n  );\n}\n","size_bytes":2086},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/templates.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, FileText, Calendar } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { TemplateForm } from \"@/lib/types\";\n\nconst templateSchema = z.object({\n  name: z.string().min(1, \"Template name is required\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  variables: z.array(z.string()).default([]),\n});\n\nexport default function Templates() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [selectedTemplate, setSelectedTemplate] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const form = useForm<TemplateForm>({\n    resolver: zodResolver(templateSchema),\n    defaultValues: {\n      name: \"\",\n      subject: \"\",\n      content: \"\",\n      variables: [],\n    },\n  });\n\n  const { data: templates } = useQuery({\n    queryKey: [\"/api/templates\"],\n    enabled: !!user,\n  });\n\n  const createTemplateMutation = useMutation({\n    mutationFn: async (data: TemplateForm) => {\n      await apiRequest(\"POST\", \"/api/templates\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Template created successfully\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTemplateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: TemplateForm }) => {\n      await apiRequest(\"PUT\", `/api/templates/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Template updated successfully\",\n      });\n      form.reset();\n      setSelectedTemplate(null);\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTemplateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/templates/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Template deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  const handleCreateTemplate = (data: TemplateForm) => {\n    if (selectedTemplate) {\n      updateTemplateMutation.mutate({ id: selectedTemplate.id, data });\n    } else {\n      createTemplateMutation.mutate(data);\n    }\n  };\n\n  const handleEditTemplate = (template: any) => {\n    setSelectedTemplate(template);\n    form.setValue(\"name\", template.name);\n    form.setValue(\"subject\", template.subject);\n    form.setValue(\"content\", template.content);\n    form.setValue(\"variables\", template.variables || []);\n    setIsDialogOpen(true);\n  };\n\n  const handleDeleteTemplate = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this template?\")) {\n      deleteTemplateMutation.mutate(id);\n    }\n  };\n\n  const extractVariables = (content: string): string[] => {\n    const regex = /{{(\\w+)}}/g;\n    const variables = new Set<string>();\n    let match;\n    \n    while ((match = regex.exec(content)) !== null) {\n      variables.add(match[1]);\n    }\n    \n    return Array.from(variables);\n  };\n\n  const handleContentChange = (content: string) => {\n    const variables = extractVariables(content);\n    form.setValue(\"variables\", variables);\n    return content;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Templates\" \n          description=\"Create and manage reusable email templates\"\n          action={\n            <Dialog \n              open={isDialogOpen} \n              onOpenChange={(open) => {\n                setIsDialogOpen(open);\n                if (!open) {\n                  setSelectedTemplate(null);\n                  form.reset();\n                }\n              }}\n            >\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-template\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Template\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {selectedTemplate ? \"Edit Template\" : \"Create New Template\"}\n                  </DialogTitle>\n                  <DialogDescription>\n                    {selectedTemplate \n                      ? \"Update your email template\"\n                      : \"Create a reusable email template with variables\"\n                    }\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleCreateTemplate)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Template Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter template name...\"\n                              data-testid=\"input-template-name\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"subject\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Subject</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter email subject...\"\n                              data-testid=\"input-template-subject\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"content\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Content</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter your email content... Use {{variableName}} for dynamic content\"\n                              className=\"min-h-[200px]\"\n                              data-testid=\"textarea-template-content\"\n                              {...field}\n                              onChange={(e) => {\n                                const content = handleContentChange(e.target.value);\n                                field.onChange(content);\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    {form.watch(\"variables\")?.length > 0 && (\n                      <div>\n                        <Label>Detected Variables</Label>\n                        <div className=\"flex flex-wrap gap-2 mt-2\">\n                          {form.watch(\"variables\").map((variable) => (\n                            <Badge key={variable} variant=\"secondary\">\n                              {`{{${variable}}}`}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel-template\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\"\n                        disabled={createTemplateMutation.isPending || updateTemplateMutation.isPending}\n                        data-testid=\"button-save-template\"\n                      >\n                        {selectedTemplate ? \"Update Template\" : \"Create Template\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          }\n        />\n        \n        <div className=\"p-6\">\n          {!templates || (templates as any[]).length === 0 ? (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <FileText className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-medium mb-2\">No templates yet</h3>\n                <p className=\"text-muted-foreground text-center mb-4\">\n                  Create your first email template to get started\n                </p>\n                <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-template\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Your First Template\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(templates as any[]).map((template: any) => (\n                <Card key={template.id} className=\"hover:shadow-md transition-shadow\">\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg\" data-testid={`text-template-name-${template.id}`}>\n                          {template.name}\n                        </CardTitle>\n                        <CardDescription className=\"mt-1\" data-testid={`text-template-subject-${template.id}`}>\n                          {template.subject}\n                        </CardDescription>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleEditTemplate(template)}\n                          data-testid={`button-edit-template-${template.id}`}\n                        >\n                          <Edit className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteTemplate(template.id)}\n                          data-testid={`button-delete-template-${template.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                          {template.content.substring(0, 150)}...\n                        </p>\n                      </div>\n                      \n                      {template.variables?.length > 0 && (\n                        <div>\n                          <Label className=\"text-xs\">Variables</Label>\n                          <div className=\"flex flex-wrap gap-1 mt-1\">\n                            {template.variables.slice(0, 3).map((variable: string) => (\n                              <Badge key={variable} variant=\"secondary\" className=\"text-xs\">\n                                {`{{${variable}}}`}\n                              </Badge>\n                            ))}\n                            {template.variables.length > 3 && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                +{template.variables.length - 3} more\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Calendar className=\"w-3 h-3 mr-1\" />\n                        {new Date(template.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":16061},"client/src/pages/send-email.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport EmailComposer from \"@/components/email/email-composer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Upload, Users, FileText } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { BulkSendForm } from \"@/lib/types\";\n\nconst bulkSendSchema = z.object({\n  subject: z.string().min(1, \"Subject is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  recipientListId: z.string().min(1, \"Please select a recipient list\"),\n  from: z.string().email(\"Sender email is required and must be valid\"),\n});\n\nexport default function SendEmail() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n\n  const form = useForm<BulkSendForm>({\n    resolver: zodResolver(bulkSendSchema),\n    defaultValues: {\n      subject: \"\",\n      content: \"\",\n      recipientListId: \"\",\n      from: \"\",\n    },\n  });\n\n  const { data: recipientLists } = useQuery({\n    queryKey: [\"/api/recipient-lists\"],\n    enabled: !!user,\n  });\n\n  const { data: templates } = useQuery({\n    queryKey: [\"/api/templates\"],\n    enabled: !!user,\n  });\n\n  const bulkSendMutation = useMutation({\n    mutationFn: async (data: BulkSendForm) => {\n      await apiRequest(\"POST\", \"/api/email/send-bulk\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Bulk email campaign started successfully\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-sends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send bulk email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  const handleTemplateSelect = (templateId: string) => {\n    const template = (templates as any[])?.find((t: any) => t.id === templateId);\n    if (template) {\n      form.setValue(\"subject\", template.subject);\n      form.setValue(\"content\", template.content);\n    }\n  };\n\n  const handleBulkSend = (data: BulkSendForm) => {\n    bulkSendMutation.mutate(data);\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Send Email\" \n          description=\"Compose and send emails to individual recipients or bulk lists\"\n        />\n        \n        <div className=\"p-6\">\n          <Tabs defaultValue=\"single\" className=\"space-y-6\">\n            <TabsList data-testid=\"tabs-send-email\">\n              <TabsTrigger value=\"single\" data-testid=\"tab-single-email\">Single Email</TabsTrigger>\n              <TabsTrigger value=\"bulk\" data-testid=\"tab-bulk-email\">Bulk Email</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"single\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <FileText className=\"w-5 h-5\" />\n                    Single Email\n                  </CardTitle>\n                  <CardDescription>\n                    Send a single email to one or more recipients\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <EmailComposer showHeader={false} />\n                </CardContent>\n              </Card>\n            </TabsContent>\n            \n            <TabsContent value=\"bulk\">\n              <div className=\"space-y-6\">\n                {/* Template Selection */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <FileText className=\"w-5 h-5\" />\n                      Load Template (Optional)\n                    </CardTitle>\n                    <CardDescription>\n                      Select a saved template to start with\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <Label htmlFor=\"template-select\">Choose Template</Label>\n                        <Select onValueChange={handleTemplateSelect} data-testid=\"select-template\">\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a template...\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {(templates as any[])?.map((template: any) => (\n                              <SelectItem key={template.id} value={template.id}>\n                                {template.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Bulk Email Form */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Users className=\"w-5 h-5\" />\n                      Bulk Email Campaign\n                    </CardTitle>\n                    <CardDescription>\n                      Send personalized emails to a recipient list\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Form {...form}>\n                      <form onSubmit={form.handleSubmit(handleBulkSend)} className=\"space-y-6\">\n                        <FormField\n                          control={form.control}\n                          name=\"from\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Sender Email</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Enter sender email (must be verified in AWS SES)\"\n                                  data-testid=\"input-bulk-from\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"recipientListId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Recipient List</FormLabel>\n                              <Select \n                                onValueChange={field.onChange} \n                                value={field.value}\n                                data-testid=\"select-recipient-list\"\n                              >\n                                <FormControl>\n                                  <SelectTrigger>\n                                    <SelectValue placeholder=\"Select recipient list...\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {(recipientLists as any[])?.map((list: any) => (\n                                    <SelectItem key={list.id} value={list.id}>\n                                      {list.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"subject\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Subject</FormLabel>\n                              <FormControl>\n                                <Input \n                                  placeholder=\"Enter email subject...\"\n                                  data-testid=\"input-bulk-subject\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"content\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Content</FormLabel>\n                              <FormControl>\n                                <div className=\"min-h-[300px] border rounded-md\">\n                                  {/* Note: In a real implementation, you'd use a rich text editor here */}\n                                  <textarea\n                                    className=\"w-full h-full min-h-[300px] p-3 border-0 resize-none focus:outline-none\"\n                                    placeholder=\"Enter your email content... You can use variables like {{firstName}}, {{lastName}}, {{email}}\"\n                                    data-testid=\"textarea-bulk-content\"\n                                    {...field}\n                                  />\n                                </div>\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <div className=\"bg-muted p-4 rounded-md\">\n                          <h4 className=\"font-medium mb-2\">Template Variables</h4>\n                          <p className=\"text-sm text-muted-foreground mb-2\">\n                            You can use these variables in your subject and content:\n                          </p>\n                          <div className=\"flex flex-wrap gap-2\">\n                            <code className=\"bg-background px-2 py-1 rounded text-xs\">{\"{{firstName}}\"}</code>\n                            <code className=\"bg-background px-2 py-1 rounded text-xs\">{\"{{lastName}}\"}</code>\n                            <code className=\"bg-background px-2 py-1 rounded text-xs\">{\"{{email}}\"}</code>\n                            <span className=\"text-xs text-muted-foreground\">+ any custom fields from CSV</span>\n                          </div>\n                        </div>\n\n                        <Button \n                          type=\"submit\" \n                          className=\"w-full\"\n                          disabled={bulkSendMutation.isPending}\n                          data-testid=\"button-send-bulk\"\n                        >\n                          {bulkSendMutation.isPending ? (\n                            <>\n                              <Upload className=\"w-4 h-4 mr-2 animate-spin\" />\n                              Sending Campaign...\n                            </>\n                          ) : (\n                            <>\n                              <Users className=\"w-4 h-4 mr-2\" />\n                              Send Bulk Campaign\n                            </>\n                          )}\n                        </Button>\n                      </form>\n                    </Form>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":13445},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/dashboard/recent-campaigns.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Mail, Calendar } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\n\nexport default function RecentCampaigns() {\n  const { data: campaigns } = useQuery({\n    queryKey: [\"/api/campaigns\"],\n  });\n\n  const { data: emailSends } = useQuery({\n    queryKey: [\"/api/email-sends\"],\n  });\n\n  // Get recent campaigns with send counts\n  const recentCampaigns = (campaigns as any[])?.slice(0, 5).map((campaign: any) => {\n    const campaignSends = (emailSends as any[])?.filter((send: any) => send.campaignId === campaign.id) || [];\n    const sentCount = campaignSends.length;\n    const deliveredCount = campaignSends.filter((send: any) => send.status === 'delivered').length;\n    \n    return {\n      ...campaign,\n      sentCount,\n      deliveredCount,\n      status: campaign.status === 'sent' ? 'Delivered' : \n               campaign.status === 'sending' ? 'Sending' : 'Draft'\n    };\n  }) || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Recent Campaigns</CardTitle>\n          <Link href=\"/analytics\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-campaigns\">\n              View All\n            </Button>\n          </Link>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!campaigns || (campaigns as any[]).length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Mail className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-muted-foreground\">No campaigns yet</p>\n            <Link href=\"/send-email\">\n              <Button variant=\"outline\" size=\"sm\" className=\"mt-2\" data-testid=\"button-create-first-campaign\">\n                Create Your First Campaign\n              </Button>\n            </Link>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {recentCampaigns.map((campaign: any) => (\n              <div \n                key={campaign.id} \n                className=\"flex items-center justify-between py-3 border-b border-border last:border-b-0\"\n                data-testid={`campaign-item-${campaign.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-blue-100 text-blue-600 rounded-lg flex items-center justify-center\">\n                    <Mail className=\"w-4 h-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\" data-testid={`campaign-name-${campaign.id}`}>\n                      {campaign.name}\n                    </p>\n                    <div className=\"flex items-center text-xs text-muted-foreground\">\n                      <Calendar className=\"w-3 h-3 mr-1\" />\n                      {new Date(campaign.createdAt).toLocaleDateString()}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm font-medium text-foreground\" data-testid={`campaign-sent-${campaign.id}`}>\n                    {campaign.sentCount > 0 ? `${campaign.sentCount} sent` : 'Not sent'}\n                  </p>\n                  <Badge \n                    variant={\n                      campaign.status === 'Delivered' ? 'default' :\n                      campaign.status === 'Sending' ? 'secondary' : 'outline'\n                    }\n                    className={\n                      campaign.status === 'Delivered' ? 'bg-green-100 text-green-800' :\n                      campaign.status === 'Sending' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-gray-100 text-gray-800'\n                    }\n                    data-testid={`campaign-status-${campaign.id}`}\n                  >\n                    {campaign.status}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4160},"client/src/components/email/rich-text-editor.tsx":{"content":"import { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Bold, Italic, List, Link, Image } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface RichTextEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  placeholder?: string;\n}\n\nexport default function RichTextEditor({ value, onChange, placeholder }: RichTextEditorProps) {\n  const [showToolbar, setShowToolbar] = useState(false);\n\n  // For now, this is a simple textarea. In a production app, you would integrate\n  // a proper rich text editor like TinyMCE, Quill, or build a more sophisticated one.\n  \n  return (\n    <div className=\"border border-input rounded-md\">\n      {/* Toolbar */}\n      <div className=\"border-b border-input p-2 flex items-center space-x-1\">\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          data-testid=\"button-bold\"\n        >\n          <Bold className=\"w-4 h-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          data-testid=\"button-italic\"\n        >\n          <Italic className=\"w-4 h-4\" />\n        </Button>\n        <div className=\"w-px h-4 bg-border mx-1\" />\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          data-testid=\"button-list\"\n        >\n          <List className=\"w-4 h-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          data-testid=\"button-link\"\n        >\n          <Link className=\"w-4 h-4\" />\n        </Button>\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          data-testid=\"button-image\"\n        >\n          <Image className=\"w-4 h-4\" />\n        </Button>\n      </div>\n      \n      {/* Editor */}\n      <Textarea\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder={placeholder}\n        className=\"min-h-[200px] border-0 focus-visible:ring-0 resize-none\"\n        data-testid=\"textarea-rich-editor\"\n      />\n    </div>\n  );\n}\n","size_bytes":2117},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2091},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Mail, \n  BarChart3, \n  NotebookPen, \n  FileText, \n  Users, \n  Settings,\n  LogOut,\n  Shield,\n  Globe,\n  MailCheck\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport DOMPurify from 'dompurify';\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: BarChart3 },\n  { name: \"SES Dashboard\", href: \"/ses-dashboard\", icon: Shield },\n  { name: \"Domains\", href: \"/domains\", icon: Globe },\n  { name: \"Email Verification\", href: \"/email-verification\", icon: MailCheck },\n  { name: \"Send Email\", href: \"/send-email\", icon: NotebookPen },\n  { name: \"Templates\", href: \"/templates\", icon: FileText },\n  { name: \"Recipients\", href: \"/recipients\", icon: Users },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nconst sanitize = (str: string) => DOMPurify.sanitize(str);\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n\n  const initials = (user as any)?.firstName && (user as any)?.lastName \n    ? `${(user as any).firstName[0]}${(user as any).lastName[0]}`\n    : (user as any)?.email?.[0]?.toUpperCase() || \"U\";\n\n  return (\n    <aside className=\"w-64 bg-card border-r border-border shadow-sm flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"bg-primary text-primary-foreground w-10 h-10 rounded-lg flex items-center justify-center font-semibold\">\n            <Mail className=\"w-5 h-5\" />\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-foreground\" data-testid=\"text-app-title\">\n              SES Manager\n            </h1>\n            <p className=\"text-sm text-muted-foreground\">AWS Email Service</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href || (item.href !== \"/\" && location.startsWith(item.href));\n          const Icon = item.icon;\n          const safeName = sanitize(item.name);\n          return (\n            <Link\n              key={safeName}\n              href={item.href}\n              className={cn(\n                \"flex items-center space-x-3 px-3 py-2 rounded-md transition-colors\",\n                isActive\n                  ? \"bg-accent text-accent-foreground\"\n                  : \"text-muted-foreground hover:bg-accent hover:text-accent-foreground\"\n              )}\n              data-testid={`nav-${safeName.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              <Icon className=\"w-5 h-5\" />\n              <span className=\"font-medium\">{safeName}</span>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Section */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center space-x-3\">\n          {(user as any)?.profileImageUrl ? (\n            <img \n              src={(user as any).profileImageUrl} \n              alt=\"Profile\" \n              className=\"w-8 h-8 rounded-full object-cover\"\n              data-testid=\"img-user-avatar\"\n            />\n          ) : (\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <span className=\"text-primary-foreground text-sm font-medium\" data-testid=\"text-user-initials\">\n                {initials}\n              </span>\n            </div>\n          )}\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-display-name\">\n              {[(user as any)?.firstName, (user as any)?.lastName].filter(Boolean).join(' ') || 'User'}\n            </p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-user-display-email\">\n              {(user as any)?.email}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => window.location.href = '/api/logout'}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4446},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"server/auth.ts":{"content":"// Based on blueprint:javascript_auth_all_persistance - Authentication service with password hashing\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\n// Validation schemas\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    rolling: true, // Extend session on each request to prevent unexpected logouts\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\" as const,\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Configure passport local strategy using email instead of username\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'email' }, // Use email field as username\n      async (email, password, done) => {\n        try {\n          const user = await storage.getUserByEmail(email);\n          if (!user || !(await comparePasswords(password, user.password))) {\n            return done(null, false);\n          } else {\n            return done(null, user);\n          }\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Registration endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Email already registered\" });\n      }\n\n      const user = await storage.createUser({\n        ...validatedData,\n        password: await hashPassword(validatedData.password),\n      });\n\n      // Log in with full user object, then remove password from response\n      req.login(user, (err) => {\n        if (err) return next(err);\n        const { password, ...userWithoutPassword } = user;\n        res.status(201).json(userWithoutPassword);\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Login endpoint\n  app.post(\"/api/login\", (req, res, next) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n        if (err) return next(err);\n        if (!user) {\n          return res.status(401).json({ message: \"Invalid email or password\" });\n        }\n        \n        req.login(user, (err) => {\n          if (err) return next(err);\n          // Remove password from response\n          const { password, ...userWithoutPassword } = user;\n          res.status(200).json(userWithoutPassword);\n        });\n      })(req, res, next);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      }\n      res.status(400).json({ message: \"Invalid request\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  // Get current user endpoint\n  app.get(\"/api/user\", (req, res) => {\n    res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate, proxy-revalidate');\n    res.setHeader('Pragma', 'no-cache');\n    res.setHeader('Expires', '0');\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    // Remove password from response\n    const { password, ...userWithoutPassword } = req.user!;\n    res.status(200).json(userWithoutPassword);\n  });\n}","size_bytes":5458},"client/src/hooks/useAuth.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance - Email/password authentication hook\nimport { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\n\ntype InsertUser = z.infer<typeof insertUserSchema>;\ntype LoginData = Pick<InsertUser, \"email\" | \"password\">;\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  \n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      try {\n        const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n        return await res.json();\n      } catch (error) {\n        console.error('Login error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (user: SelectUser) => {\n      // Set user data immediately - no need to invalidate since we have fresh data\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have successfully logged in.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      try {\n        const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n        return await res.json();\n      } catch (error) {\n        console.error('Registration error:', error);\n        throw error;\n      }\n    },\n    onSuccess: (user: SelectUser) => {\n      // Set user data immediately - no need to invalidate since we have fresh data\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to SES Manager. You can now start managing your emails.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\n// Note: AuthProvider is already exported above","size_bytes":3818},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"scripts/setup-database.js":{"content":"#!/usr/bin/env node\n\nimport { db, pool } from '../server/db.js';\nimport { users, sessions } from '../shared/schema.js';\nimport { storage } from '../server/storage.js';\nimport { sql, count } from 'drizzle-orm';\n\nconsole.log('🚀 Setting up and validating database for user authentication...\\n');\n\nasync function validateDatabase() {\n  try {\n    // Test database connection\n    console.log('✅ Testing database connection...');\n    await db.execute(sql`SELECT 1`);\n    console.log('   Database connection successful\\n');\n\n    // Check if required tables exist\n    console.log('✅ Checking authentication tables...');\n    \n    // Check users table\n    const userCount = await db.select({ count: count() }).from(users);\n    console.log(`   Users table exists - Current users: ${userCount[0].count}`);\n    \n    // Check sessions table\n    const sessionCount = await db.select({ count: count() }).from(sessions);\n    console.log(`   Sessions table exists - Active sessions: ${sessionCount[0].count}`);\n    \n    // Verify storage interface is working\n    console.log('\\n✅ Testing storage interface...');\n    const testUserId = 'test-user-id';\n    const existingUser = await storage.getUserByEmail('test@example.com');\n    console.log(`   Storage getUserByEmail method working: ${existingUser ? 'User exists' : 'No test user found (expected)'}`);\n    \n    console.log('\\n🎉 Database setup validation complete!');\n    console.log('\\n📋 Authentication Features Available:');\n    console.log('   • User registration with email/password');\n    console.log('   • User login with secure password hashing');\n    console.log('   • Session management with PostgreSQL store');\n    console.log('   • Password validation and security');\n    console.log('   • User profile management');\n    \n    console.log('\\n🔧 API Endpoints Ready:');\n    console.log('   POST /api/register - Create new user account');\n    console.log('   POST /api/login    - Authenticate user');\n    console.log('   POST /api/logout   - End user session');\n    console.log('   GET  /api/user     - Get current user info');\n    \n    console.log('\\n💡 To test authentication:');\n    console.log('   1. Start the application: npm run dev');\n    console.log('   2. Navigate to the login/signup page');\n    console.log('   3. Create a new account or login with existing credentials');\n    \n    return true;\n  } catch (error) {\n    console.error('❌ Database validation failed:', error.message);\n    return false;\n  }\n}\n\nasync function createSampleUser() {\n  try {\n    console.log('\\n🧪 Testing user creation...');\n    \n    // Check if sample user already exists\n    const existingUser = await storage.getUserByEmail('demo@example.com');\n    if (existingUser) {\n      console.log('   Sample user already exists: demo@example.com');\n      return;\n    }\n    \n    // Create a sample user (password will be hashed automatically by the auth system)\n    console.log('   Creating sample user: demo@example.com');\n    console.log('   Note: Use the registration API endpoint to create users with proper password hashing');\n    console.log('   Sample user creation skipped - use /api/register endpoint instead');\n    \n  } catch (error) {\n    console.log('   Sample user creation info:', error.message);\n  }\n}\n\nasync function showDatabaseSchema() {\n  console.log('\\n📊 Database Schema Overview:');\n  console.log('   • users: User accounts with encrypted passwords');\n  console.log('   • sessions: Session storage for authentication');\n  console.log('   • aws_credentials: Encrypted AWS credentials per user');\n  console.log('   • email_templates: User email templates');\n  console.log('   • recipient_lists: Email recipient management');\n  console.log('   • recipients: Individual email recipients');\n  console.log('   • email_campaigns: Email marketing campaigns');\n  console.log('   • email_sends: Individual email send records');\n  console.log('   • email_tracking_events: Email engagement tracking');\n}\n\nasync function main() {\n  try {\n    const isValid = await validateDatabase();\n    \n    if (isValid) {\n      await createSampleUser();\n      await showDatabaseSchema();\n      \n      console.log('\\n✨ Database is ready for user authentication!');\n      console.log('   Your email marketing application with authentication is fully configured.');\n    }\n    \n  } catch (error) {\n    console.error('Setup failed:', error);\n    process.exit(1);\n  } finally {\n    // Close database connection\n    await pool.end();\n    process.exit(0);\n  }\n}\n\n// Run the setup\nmain();","size_bytes":4549},"client/src/pages/signup-page.tsx":{"content":"// Signup page - redirects to login page on success\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Mail, BarChart3, Shield, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Redirect, Link, useLocation } from \"wouter\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function SignupPage() {\n  const { user } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: Omit<RegisterData, \"confirmPassword\">) => {\n      const response = await apiRequest(\"POST\", \"/api/register\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account created successfully!\",\n        description: \"Please sign in with your credentials.\",\n      });\n      setLocation(\"/login\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Failed to create account. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onRegister = (data: RegisterData) => {\n    try {\n      const { confirmPassword, ...registerData } = data;\n      console.log('Submitting registration:', { email: registerData.email, hasPassword: !!registerData.password });\n      registerMutation.mutate(registerData);\n    } catch (error) {\n      console.error('Registration submission error:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Left Column - Signup Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"bg-primary text-primary-foreground w-16 h-16 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-8 h-8\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">SES Manager</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Create your account to get started\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Create account</CardTitle>\n              <CardDescription>\n                Create a new account to start managing your email campaigns\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...registerForm}>\n                <form onSubmit={registerForm.handleSubmit(onRegister)} className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={registerForm.control}\n                      name=\"firstName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>First Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"John\"\n                              data-testid=\"input-register-firstname\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={registerForm.control}\n                      name=\"lastName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Last Name</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Doe\"\n                              data-testid=\"input-register-lastname\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                  <FormField\n                    control={registerForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"email\"\n                            placeholder=\"john@example.com\"\n                            data-testid=\"input-register-email\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={registerForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Create a strong password\"\n                              data-testid=\"input-register-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              data-testid=\"button-toggle-password-register\"\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={registerForm.control}\n                    name=\"confirmPassword\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Confirm Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showConfirmPassword ? \"text\" : \"password\"}\n                              placeholder=\"Confirm your password\"\n                              data-testid=\"input-register-confirm-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                              data-testid=\"button-toggle-confirm-password\"\n                            >\n                              {showConfirmPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={registerMutation.isPending}\n                    data-testid=\"button-register-submit\"\n                  >\n                    {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                  </Button>\n                </form>\n              </Form>\n              <div className=\"mt-4 text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Already have an account?{\" \"}\n                  <Link href=\"/login\" className=\"text-primary hover:underline\" data-testid=\"link-login\">\n                    Sign in\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 bg-muted p-8 items-center justify-center\">\n        <div className=\"max-w-md text-center space-y-6\">\n          <h2 className=\"text-3xl font-bold\">Powerful Email Management</h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Take control of your email campaigns with our comprehensive SES management platform.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 text-blue-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Mass Email Sending</h3>\n                <p className=\"text-sm text-muted-foreground\">Send personalized emails to thousands</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-green-100 text-green-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Advanced Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">Track opens, clicks, and engagement</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-purple-100 text-purple-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Secure & Reliable</h3>\n                <p className=\"text-sm text-muted-foreground\">Enterprise-grade security and encryption</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12370},"client/src/components/tracking/email-tracking-table.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, Eye } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { EmailSendRecord } from \"@/lib/types\";\n\nexport default function EmailTrackingTable() {\n  const { data: emailSends } = useQuery<EmailSendRecord[]>({\n    queryKey: [\"/api/email-sends\"],\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      delivered: \"bg-green-100 text-green-800\",\n      sent: \"bg-blue-100 text-blue-800\", \n      bounced: \"bg-red-100 text-red-800\",\n      complained: \"bg-red-100 text-red-800\",\n      failed: \"bg-gray-100 text-gray-800\",\n      pending: \"bg-yellow-100 text-yellow-800\",\n    } as const;\n\n    return (\n      <Badge \n        variant=\"secondary\" \n        className={variants[status as keyof typeof variants] || variants.pending}\n      >\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatDate = (dateString?: string) => {\n    if (!dateString) return \"-\";\n    const date = new Date(dateString);\n    return date.toLocaleDateString() + \", \" + date.toLocaleTimeString([], { \n      hour: '2-digit', \n      minute: '2-digit' \n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex justify-between items-center\">\n          <CardTitle>Email Tracking</CardTitle>\n          <div className=\"flex space-x-2\">\n            <Select defaultValue=\"7days\" data-testid=\"select-tracking-timeframe\">\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"90days\">Last 90 days</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-export-tracking\">\n              <Download className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {!emailSends || emailSends.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Eye className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-muted-foreground\">No email tracking data available</p>\n          </div>\n        ) : (\n          <>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-border\">\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Subject</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Recipient</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Status</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Sent</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Opened</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {emailSends.slice(0, 10).map((send) => (\n                    <tr \n                      key={send.id} \n                      className=\"border-b border-border hover:bg-accent/50 transition-colors\"\n                      data-testid={`tracking-row-${send.id}`}\n                    >\n                      <td className=\"py-3 px-4\">\n                        <p className=\"font-medium text-foreground truncate max-w-[200px]\" data-testid={`tracking-subject-${send.id}`}>\n                          {send.subject}\n                        </p>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <p className=\"text-foreground\" data-testid={`tracking-recipient-${send.id}`}>\n                          {send.recipientEmail}\n                        </p>\n                      </td>\n                      <td className=\"py-3 px-4\" data-testid={`tracking-status-${send.id}`}>\n                        {getStatusBadge(send.status)}\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <p className=\"text-muted-foreground text-sm\" data-testid={`tracking-sent-${send.id}`}>\n                          {formatDate(send.sentAt)}\n                        </p>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <p className=\"text-muted-foreground text-sm\" data-testid={`tracking-opened-${send.id}`}>\n                          {send.openedAt ? formatDate(send.openedAt) : \"Not opened\"}\n                        </p>\n                      </td>\n                      <td className=\"py-3 px-4\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          data-testid={`tracking-view-${send.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            \n            {emailSends.length > 10 && (\n              <div className=\"p-4 border-t border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Showing 1 to 10 of {emailSends.length} results\n                  </p>\n                  <div className=\"flex space-x-2\">\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-tracking-previous\">\n                      Previous\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"bg-primary text-primary-foreground\">\n                      1\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" data-testid=\"button-tracking-next\">\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6555},"client/src/lib/protected-route.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance - Protected route component\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element | null;\n}) {\n  const { user, isLoading } = useAuth();\n\n  return (\n    <Route path={path}>\n      {(() => {\n        if (isLoading) {\n          return (\n            <div className=\"flex items-center justify-center min-h-screen bg-background\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n            </div>\n          );\n        }\n        \n        if (!user) {\n          return <Redirect to=\"/login\" />;\n        }\n        \n        return <Component />;\n      })()}\n    </Route>\n  );\n}","size_bytes":838},"client/src/pages/settings.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Settings as SettingsIcon, Shield, Key, User, Mail, Send } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport CredentialsModal from \"@/components/aws/credentials-modal\";\nimport { useState } from \"react\";\n\nexport default function Settings() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [isCredentialsModalOpen, setIsCredentialsModalOpen] = useState(false);\n  const [testEmailFrom, setTestEmailFrom] = useState(\"\");\n  const [testEmailTo, setTestEmailTo] = useState(\"\");\n\n  const { data: awsCredentials } = useQuery({\n    queryKey: [\"/api/aws/credentials\"],\n    enabled: !!user,\n  });\n\n  const sendTestEmailMutation = useMutation({\n    mutationFn: async ({ from, to }: { from: string; to: string }) => {\n      const res = await apiRequest(\"POST\", \"/api/ses/send-test\", { from, to });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Test Email Sent\",\n        description: data.message || \"Test email sent successfully!\",\n      });\n      setTestEmailFrom(\"\");\n      setTestEmailTo(\"\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Settings\" \n          description=\"Manage your account and application settings\"\n        />\n        \n        <div className=\"p-6\">\n          <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n            <TabsList data-testid=\"tabs-settings\">\n              <TabsTrigger value=\"profile\" data-testid=\"tab-profile\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Profile\n              </TabsTrigger>\n              <TabsTrigger value=\"aws\" data-testid=\"tab-aws\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                AWS Credentials\n              </TabsTrigger>\n              <TabsTrigger value=\"test-email\" data-testid=\"tab-test-email\">\n                <Send className=\"w-4 h-4 mr-2\" />\n                Test Email\n              </TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"profile\">\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <User className=\"w-5 h-5\" />\n                      Profile Information\n                    </CardTitle>\n                    <CardDescription>\n                      Your account information from your login provider\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center space-x-4\">\n                      {(user as any)?.profileImageUrl ? (\n                        <img \n                          src={(user as any).profileImageUrl} \n                          alt=\"Profile\" \n                          className=\"w-16 h-16 rounded-full object-cover\"\n                          data-testid=\"img-profile\"\n                        />\n                      ) : (\n                        <div className=\"w-16 h-16 bg-primary text-primary-foreground rounded-full flex items-center justify-center\">\n                          <User className=\"w-8 h-8\" />\n                        </div>\n                      )}\n                      <div>\n                        <h3 className=\"text-lg font-medium\" data-testid=\"text-user-name\">\n                          {[(user as any)?.firstName, (user as any)?.lastName].filter(Boolean).join(' ') || 'User'}\n                        </h3>\n                        <p className=\"text-muted-foreground\" data-testid=\"text-user-email\">\n                          {(user as any)?.email || 'No email provided'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 pt-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">User ID</label>\n                        <p className=\"font-mono text-sm bg-muted p-2 rounded\" data-testid=\"text-user-id\">\n                          {(user as any)?.id || 'Not available'}\n                        </p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Account Created</label>\n                        <p className=\"text-sm bg-muted p-2 rounded\" data-testid=\"text-account-created\">\n                          {(user as any)?.createdAt ? new Date((user as any).createdAt).toLocaleDateString() : 'Not available'}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"pt-4 border-t border-border\">\n                      <Button \n                        variant=\"outline\" \n                        onClick={() => window.location.href = '/api/logout'}\n                        data-testid=\"button-logout\"\n                      >\n                        Sign Out\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value=\"aws\">\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Shield className=\"w-5 h-5\" />\n                      AWS SES Credentials\n                    </CardTitle>\n                    <CardDescription>\n                      Configure your AWS credentials to send emails through SES\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-3 h-3 rounded-full ${(awsCredentials as any)?.connected ? 'bg-green-500' : 'bg-red-500'}`} />\n                        <div>\n                          <p className=\"font-medium\" data-testid=\"text-aws-status\">\n                            {(awsCredentials as any)?.connected ? 'AWS Connected' : 'AWS Not Connected'}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {(awsCredentials as any)?.connected \n                              ? `Region: ${(awsCredentials as any).region}` \n                              : 'Configure your AWS credentials to start sending emails'\n                            }\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        {(awsCredentials as any)?.connected && (\n                          <Badge variant=\"secondary\" data-testid=\"badge-aws-region\">\n                            {(awsCredentials as any).region}\n                          </Badge>\n                        )}\n                        <Button \n                          onClick={() => setIsCredentialsModalOpen(true)}\n                          data-testid=\"button-configure-aws\"\n                        >\n                          <Key className=\"w-4 h-4 mr-2\" />\n                          {(awsCredentials as any)?.connected ? 'Update Credentials' : 'Configure AWS'}\n                        </Button>\n                      </div>\n                    </div>\n\n                    <div className=\"bg-muted p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                        <Shield className=\"w-4 h-4\" />\n                        Security Information\n                      </h4>\n                      <ul className=\"text-sm text-muted-foreground space-y-1\">\n                        <li>• Your AWS credentials are encrypted and stored securely</li>\n                        <li>• Credentials are never exposed to the frontend</li>\n                        <li>• You can update or remove credentials at any time</li>\n                        <li>• We recommend using IAM users with minimal SES permissions</li>\n                      </ul>\n                    </div>\n\n                    <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                      <h4 className=\"font-medium mb-2 flex items-center gap-2\">\n                        <Mail className=\"w-4 h-4\" />\n                        Required AWS Permissions\n                      </h4>\n                      <p className=\"text-sm text-muted-foreground mb-2\">\n                        Your AWS IAM user needs the following permissions:\n                      </p>\n                      <div className=\"bg-background p-3 rounded font-mono text-xs\">\n                        <div>• ses:SendEmail</div>\n                        <div>• ses:SendBulkTemplatedEmail</div>\n                        <div>• ses:CreateTemplate</div>\n                        <div>• ses:DeleteTemplate</div>\n                        <div>• ses:ListTemplates</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>API Usage & Limits</CardTitle>\n                    <CardDescription>\n                      Monitor your AWS SES usage and limits\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8\">\n                      <SettingsIcon className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n                      <p className=\"text-muted-foreground\">\n                        Connect your AWS credentials to view usage statistics\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"test-email\">\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Send className=\"w-5 h-5\" />\n                      Send Test Email\n                    </CardTitle>\n                    <CardDescription>\n                      Test your AWS SES configuration by sending a test email\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"test-from\">From Email</Label>\n                      <Input\n                        id=\"test-from\"\n                        type=\"email\"\n                        placeholder=\"sender@yourdomain.com\"\n                        value={testEmailFrom}\n                        onChange={(e) => setTestEmailFrom(e.target.value)}\n                        data-testid=\"input-test-from\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Must be a verified email address or domain in AWS SES\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"test-to\">To Email</Label>\n                      <Input\n                        id=\"test-to\"\n                        type=\"email\"\n                        placeholder=\"recipient@example.com\"\n                        value={testEmailTo}\n                        onChange={(e) => setTestEmailTo(e.target.value)}\n                        data-testid=\"input-test-to\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Email address to send the test email to\n                      </p>\n                    </div>\n\n                    <Button\n                      onClick={() => {\n                        if (!testEmailFrom || !testEmailTo) {\n                          toast({\n                            title: \"Missing Information\",\n                            description: \"Please provide both From and To email addresses\",\n                            variant: \"destructive\",\n                          });\n                          return;\n                        }\n                        sendTestEmailMutation.mutate({ from: testEmailFrom, to: testEmailTo });\n                      }}\n                      disabled={sendTestEmailMutation.isPending || !(awsCredentials as any)?.connected}\n                      className=\"w-full\"\n                      data-testid=\"button-send-test\"\n                    >\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      {sendTestEmailMutation.isPending ? \"Sending...\" : \"Send Test Email\"}\n                    </Button>\n\n                    {!(awsCredentials as any)?.connected && (\n                      <p className=\"text-sm text-amber-600 dark:text-amber-500\">\n                        Please configure your AWS credentials first in the AWS Credentials tab\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n\n      <CredentialsModal \n        open={isCredentialsModalOpen}\n        onOpenChange={setIsCredentialsModalOpen}\n      />\n    </div>\n  );\n}\n","size_bytes":14902},"client/src/pages/landing.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Mail, Shield, BarChart3, Users, Zap, CheckCircle } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const [, setLocation] = useLocation();\n\n  const goToSignup = () => setLocation('/signup');\n  const goToLogin = () => setLocation('/login');\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-primary text-primary-foreground w-8 h-8 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-4 h-4\" />\n              </div>\n              <span className=\"font-semibold text-lg\">SES Manager</span>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Button \n                variant=\"ghost\"\n                onClick={goToLogin}\n                data-testid=\"header-button-login\"\n                className=\"text-sm\"\n              >\n                Log In\n              </Button>\n              <Button \n                size=\"sm\"\n                onClick={goToSignup}\n                data-testid=\"header-button-signup\"\n                className=\"text-sm\"\n              >\n                Sign Up\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"bg-primary text-primary-foreground w-16 h-16 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-8 h-8\" />\n              </div>\n            </div>\n            <h1 className=\"text-4xl sm:text-6xl font-bold tracking-tight mb-6\">\n              SES Manager\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n              A powerful, secure fullstack web application for managing AWS Simple Email Service (SES). \n              Send mass emails, track engagement, and analyze your campaigns with ease.\n            </p>\n            <Button \n              size=\"lg\" \n              onClick={goToSignup}\n              data-testid=\"button-get-started\"\n              className=\"text-lg px-8 py-3\"\n            >\n              Get Started\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"py-24 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold mb-4\">Everything you need for email marketing</h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Comprehensive tools to manage your AWS SES email campaigns\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card>\n              <CardHeader>\n                <div className=\"bg-blue-100 text-blue-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Mail className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Mass Email Sending</CardTitle>\n                <CardDescription>\n                  Send personalized emails to thousands of recipients using AWS SES with template variables\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"bg-green-100 text-green-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <BarChart3 className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Advanced Analytics</CardTitle>\n                <CardDescription>\n                  Track opens, clicks, bounces, and complaints with detailed analytics and reporting\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"bg-purple-100 text-purple-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Users className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Recipient Management</CardTitle>\n                <CardDescription>\n                  Upload CSV files, organize recipient lists, and manage your contacts efficiently\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"bg-orange-100 text-orange-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Shield className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Secure Credentials</CardTitle>\n                <CardDescription>\n                  Your AWS credentials are encrypted and stored securely. Never exposed to the frontend\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"bg-red-100 text-red-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <Zap className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Rich Text Editor</CardTitle>\n                <CardDescription>\n                  Compose beautiful emails with our WYSIWYG editor and reusable templates\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"bg-indigo-100 text-indigo-600 w-12 h-12 rounded-lg flex items-center justify-center mb-4\">\n                  <CheckCircle className=\"w-6 h-6\" />\n                </div>\n                <CardTitle>Real-time Tracking</CardTitle>\n                <CardDescription>\n                  Monitor delivery status, bounces, and engagement metrics in real-time\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"py-24\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-3xl font-bold mb-4\">Ready to get started?</h2>\n          <p className=\"text-muted-foreground text-lg mb-8\">\n            Join thousands of users who trust SES Manager for their email campaigns\n          </p>\n          <Button \n            size=\"lg\" \n            onClick={goToSignup}\n            data-testid=\"button-cta\"\n            className=\"text-lg px-8 py-3\"\n          >\n            Start Your Free Trial\n          </Button>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-primary text-primary-foreground w-8 h-8 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-4 h-4\" />\n              </div>\n              <span className=\"font-semibold\">SES Manager</span>\n            </div>\n          </div>\n          <p className=\"text-center text-muted-foreground mt-4\">\n            © 2024 SES Manager. All rights reserved.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":7806},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    try {\n      const text = await res.text();\n      let errorMessage = text || res.statusText;\n      \n      // Try to parse JSON error response\n      try {\n        const jsonError = JSON.parse(text);\n        if (jsonError.message) {\n          errorMessage = jsonError.message;\n        }\n      } catch {\n        // Not JSON, use raw text\n      }\n      \n      throw new Error(errorMessage);\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error(`Request failed with status ${res.status}`);\n    }\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1831},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/services/encryptionService.ts":{"content":"\nimport crypto from 'crypto';\n\nconst ALGORITHM = 'aes-256-gcm';\nconst KEY_LENGTH = 32;\nconst IV_LENGTH = 16;\nconst TAG_LENGTH = 16;\n\nfunction getEncryptionKey(): Buffer {\n  const secret = process.env.SESSION_SECRET;\n  if (!secret) {\n    throw new Error('SESSION_SECRET environment variable is required for encryption');\n  }\n  return crypto.scryptSync(secret, 'salt', KEY_LENGTH);\n}\n\nexport function encrypt(text: string): string {\n  const key = getEncryptionKey();\n  const iv = crypto.randomBytes(IV_LENGTH);\n  const cipher = crypto.createCipheriv(ALGORITHM, key, iv);\n  let encrypted = cipher.update(text, 'utf8', 'hex');\n  encrypted += cipher.final('hex');\n  const authTag = cipher.getAuthTag();\n  // Combine iv + authTag + encrypted data\n  return iv.toString('hex') + authTag.toString('hex') + encrypted;\n}\n\nexport function decrypt(encryptedData: string): string {\n  const key = getEncryptionKey();\n  const iv = Buffer.from(encryptedData.slice(0, IV_LENGTH * 2), 'hex');\n  const authTag = Buffer.from(encryptedData.slice(IV_LENGTH * 2, (IV_LENGTH + TAG_LENGTH) * 2), 'hex');\n  const encrypted = encryptedData.slice((IV_LENGTH + TAG_LENGTH) * 2);\n  const decipher = crypto.createDecipheriv(ALGORITHM, key, iv);\n  decipher.setAuthTag(authTag);\n  let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n  decrypted += decipher.final('utf8');\n  return decrypted;\n}\n","size_bytes":1367},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Only initialize OAuth if explicitly configured\nconst isOAuthEnabled = process.env.REPLIT_DOMAINS && process.env.REPL_ID;\n\nconst getOidcConfig = memoize(\n  async () => {\n    if (!isOAuthEnabled) {\n      throw new Error(\"OAuth not configured\");\n    }\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"lax\" : \"lax\",\n      maxAge: sessionTtl,\n    },\n  });\n  // Use default memory store for development\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  // TODO: Fix types for OAuth user creation when implementing Replit auth\n  // await storage.upsertUser({\n  //   id: claims[\"sub\"],\n  //   email: claims[\"email\"],\n  //   password: \"\", // OAuth users don't have passwords\n  //   firstName: claims[\"first_name\"],\n  //   lastName: claims[\"last_name\"],\n  //   profileImageUrl: claims[\"profile_image_url\"],\n  // });\n}\n\nexport async function setupAuth(app: Express) {\n  if (!isOAuthEnabled) {\n    console.warn(\"Replit OAuth not configured - skipping OAuth setup\");\n    return;\n  }\n\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    // TODO: Fix types for OAuth authentication when implementing Replit auth\n    const user = {} as any;\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4591},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"server/db.ts":{"content":"import { PrismaClient } from '@prisma/client';\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const prisma = new PrismaClient();","size_bytes":268},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"prisma/migrations/migration_lock.toml":{"content":"# Please do not edit this file manually\n# It should be added in your version-control system (e.g., Git)\nprovider = \"postgresql\"\n","size_bytes":128},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/recipients.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Plus, Upload, Users, FileText, Calendar, Mail } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { RecipientListForm } from \"@/lib/types\";\n\nconst recipientListSchema = z.object({\n  name: z.string().min(1, \"List name is required\"),\n  description: z.string().optional(),\n});\n\nexport default function Recipients() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [selectedList, setSelectedList] = useState<any>(null);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [uploadFile, setUploadFile] = useState<File | null>(null);\n\n  const form = useForm<RecipientListForm>({\n    resolver: zodResolver(recipientListSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n    },\n  });\n\n  const { data: recipientLists } = useQuery({\n    queryKey: [\"/api/recipient-lists\"],\n    enabled: !!user,\n  });\n\n  const { data: recipients } = useQuery({\n    queryKey: [\"/api/recipient-lists\", selectedList?.id, \"recipients\"],\n    enabled: !!user && !!selectedList?.id,\n  });\n\n  const createListMutation = useMutation({\n    mutationFn: async (data: RecipientListForm) => {\n      await apiRequest(\"POST\", \"/api/recipient-lists\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Recipient list created successfully\",\n      });\n      form.reset();\n      setIsDialogOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipient-lists\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create recipient list\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const uploadRecipientsMutation = useMutation({\n    mutationFn: async ({ listId, file }: { listId: string; file: File }) => {\n      const formData = new FormData();\n      formData.append('csv', file);\n      \n      const response = await fetch(`/api/recipient-lists/${listId}/upload`, {\n        method: 'POST',\n        body: formData,\n        credentials: 'include',\n      });\n      \n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(error || 'Upload failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: data.message || \"Recipients uploaded successfully\",\n      });\n      setUploadFile(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipient-lists\", selectedList?.id, \"recipients\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload recipients\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  const handleCreateList = (data: RecipientListForm) => {\n    createListMutation.mutate(data);\n  };\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file && file.type === 'text/csv') {\n      setUploadFile(file);\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"Please select a CSV file\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUploadRecipients = () => {\n    if (!selectedList || !uploadFile) return;\n    \n    uploadRecipientsMutation.mutate({\n      listId: selectedList.id,\n      file: uploadFile,\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Recipients\" \n          description=\"Manage your recipient lists and contacts\"\n          action={\n            <Dialog \n              open={isDialogOpen} \n              onOpenChange={(open) => {\n                setIsDialogOpen(open);\n                if (!open) {\n                  form.reset();\n                }\n              }}\n            >\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-list\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New List\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Create New Recipient List</DialogTitle>\n                  <DialogDescription>\n                    Create a new list to organize your email recipients\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(handleCreateList)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>List Name</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Enter list name...\"\n                              data-testid=\"input-list-name\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"Enter list description...\"\n                              data-testid=\"textarea-list-description\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-2\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel-list\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\"\n                        disabled={createListMutation.isPending}\n                        data-testid=\"button-save-list\"\n                      >\n                        Create List\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          }\n        />\n        \n        <div className=\"p-6\">\n          <Tabs defaultValue=\"lists\" className=\"space-y-6\">\n            <TabsList data-testid=\"tabs-recipients\">\n              <TabsTrigger value=\"lists\" data-testid=\"tab-lists\">Recipient Lists</TabsTrigger>\n              <TabsTrigger value=\"manage\" data-testid=\"tab-manage\">Manage Recipients</TabsTrigger>\n            </TabsList>\n            \n            <TabsContent value=\"lists\">\n              {!recipientLists || (recipientLists as any[]).length === 0 ? (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <Users className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">No recipient lists yet</h3>\n                    <p className=\"text-muted-foreground text-center mb-4\">\n                      Create your first recipient list to organize your contacts\n                    </p>\n                    <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-list\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Create Your First List\n                    </Button>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {(recipientLists as any[]).map((list: any) => (\n                    <Card \n                      key={list.id} \n                      className={`hover:shadow-md transition-shadow cursor-pointer ${\n                        selectedList?.id === list.id ? 'ring-2 ring-primary' : ''\n                      }`}\n                      onClick={() => setSelectedList(list)}\n                      data-testid={`card-list-${list.id}`}\n                    >\n                      <CardHeader>\n                        <CardTitle className=\"text-lg\" data-testid={`text-list-name-${list.id}`}>\n                          {list.name}\n                        </CardTitle>\n                        {list.description && (\n                          <CardDescription data-testid={`text-list-description-${list.id}`}>\n                            {list.description}\n                          </CardDescription>\n                        )}\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center text-sm text-muted-foreground\">\n                            <Mail className=\"w-4 h-4 mr-2\" />\n                            <span>Click to view recipients</span>\n                          </div>\n                          \n                          <div className=\"flex items-center text-xs text-muted-foreground\">\n                            <Calendar className=\"w-3 h-3 mr-1\" />\n                            {new Date(list.createdAt).toLocaleDateString()}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n            </TabsContent>\n            \n            <TabsContent value=\"manage\">\n              {!selectedList ? (\n                <Card>\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <FileText className=\"w-12 h-12 text-muted-foreground mb-4\" />\n                    <h3 className=\"text-lg font-medium mb-2\">Select a recipient list</h3>\n                    <p className=\"text-muted-foreground text-center\">\n                      Choose a recipient list from the Lists tab to manage recipients\n                    </p>\n                  </CardContent>\n                </Card>\n              ) : (\n                <div className=\"space-y-6\">\n                  {/* Upload Section */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Upload className=\"w-5 h-5\" />\n                        Upload Recipients to \"{selectedList.name}\"\n                      </CardTitle>\n                      <CardDescription>\n                        Upload a CSV file with recipient information\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <Label htmlFor=\"csv-upload\">Choose CSV File</Label>\n                          <Input\n                            id=\"csv-upload\"\n                            type=\"file\"\n                            accept=\".csv\"\n                            onChange={handleFileUpload}\n                            data-testid=\"input-csv-upload\"\n                          />\n                        </div>\n                        \n                        {uploadFile && (\n                          <div className=\"flex items-center justify-between p-3 bg-muted rounded-md\">\n                            <span className=\"text-sm\">{uploadFile.name}</span>\n                            <Button\n                              onClick={handleUploadRecipients}\n                              disabled={uploadRecipientsMutation.isPending}\n                              data-testid=\"button-upload-csv\"\n                            >\n                              {uploadRecipientsMutation.isPending ? (\n                                <>\n                                  <Upload className=\"w-4 h-4 mr-2 animate-spin\" />\n                                  Uploading...\n                                </>\n                              ) : (\n                                <>\n                                  <Upload className=\"w-4 h-4 mr-2\" />\n                                  Upload\n                                </>\n                              )}\n                            </Button>\n                          </div>\n                        )}\n                        \n                        <div className=\"bg-muted p-4 rounded-md\">\n                          <h4 className=\"font-medium mb-2\">CSV Format Requirements</h4>\n                          <ul className=\"text-sm text-muted-foreground space-y-1\">\n                            <li>• Required column: <code>email</code></li>\n                            <li>• Optional columns: <code>firstName</code>, <code>lastName</code></li>\n                            <li>• Any additional columns will be stored as custom metadata</li>\n                            <li>• First row should contain column headers</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Recipients Table */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Recipients in \"{selectedList.name}\"</CardTitle>\n                      <CardDescription>\n                        {(recipients as any[])?.length || 0} recipients\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent>\n                      {!recipients || (recipients as any[]).length === 0 ? (\n                        <div className=\"text-center py-8\">\n                          <Users className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                          <p className=\"text-muted-foreground\">No recipients in this list</p>\n                        </div>\n                      ) : (\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full\">\n                            <thead>\n                              <tr className=\"border-b border-border\">\n                                <th className=\"text-left py-2 font-medium text-muted-foreground\">Email</th>\n                                <th className=\"text-left py-2 font-medium text-muted-foreground\">Name</th>\n                                <th className=\"text-left py-2 font-medium text-muted-foreground\">Status</th>\n                                <th className=\"text-left py-2 font-medium text-muted-foreground\">Added</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {(recipients as any[]).map((recipient: any) => (\n                                <tr key={recipient.id} className=\"border-b border-border\">\n                                  <td className=\"py-3\" data-testid={`text-email-${recipient.id}`}>\n                                    {recipient.email}\n                                  </td>\n                                  <td className=\"py-3\" data-testid={`text-name-${recipient.id}`}>\n                                    {[recipient.firstName, recipient.lastName].filter(Boolean).join(' ') || '-'}\n                                  </td>\n                                  <td className=\"py-3\">\n                                    <Badge \n                                      variant={recipient.isActive ? \"default\" : \"secondary\"}\n                                      data-testid={`status-${recipient.id}`}\n                                    >\n                                      {recipient.isActive ? 'Active' : 'Inactive'}\n                                    </Badge>\n                                  </td>\n                                  <td className=\"py-3 text-muted-foreground text-sm\">\n                                    {new Date(recipient.createdAt).toLocaleDateString()}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":19126},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { NotebookPen, Upload, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function QuickActions() {\n  const actions = [\n    {\n      icon: NotebookPen,\n      title: \"Send Email\",\n      description: \"Compose and send emails\",\n      iconColor: \"bg-blue-100 text-blue-600\",\n      href: \"/send-email\",\n      testId: \"action-send-email\"\n    },\n    {\n      icon: Upload,\n      title: \"Upload Recipients\",\n      description: \"Import CSV recipient list\",\n      iconColor: \"bg-green-100 text-green-600\",\n      href: \"/recipients\",\n      testId: \"action-upload-recipients\"\n    },\n    {\n      icon: FileText,\n      title: \"Create Template\",\n      description: \"Design reusable templates\",\n      iconColor: \"bg-purple-100 text-purple-600\",\n      href: \"/templates\",\n      testId: \"action-create-template\"\n    },\n  ];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          {actions.map((action) => {\n            const Icon = action.icon;\n            \n            return (\n              <Link key={action.title} href={action.href}>\n                <Button\n                  variant=\"outline\"\n                  className=\"flex items-center space-x-3 p-4 h-auto text-left w-full justify-start hover:bg-accent transition-colors\"\n                  data-testid={action.testId}\n                >\n                  <div className={`p-3 rounded-lg ${action.iconColor}`}>\n                    <Icon className=\"w-5 h-5\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-foreground\">{action.title}</p>\n                    <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n                  </div>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2086},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"replit.md":{"content":"# SES Manager - AWS Email Service GUI\n\n## Overview\n\nSES Manager is a secure fullstack web application that provides a comprehensive GUI for interacting with AWS Simple Email Service (SES). The application enables users to authenticate, manage AWS credentials, send emails (both single and bulk), track email performance metrics, and manage templates and recipient lists. It's built with a modern TypeScript stack featuring React frontend, Express.js backend, and PostgreSQL database with real-time email tracking capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **UI Framework**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **Authentication**: Context-based auth provider with protected routes\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Authentication**: Passport.js with local strategy and session-based auth\n- **Session Management**: Express sessions with PostgreSQL store\n- **API Design**: RESTful APIs with consistent error handling and validation\n- **File Processing**: Multer for CSV uploads with streaming CSV parser\n\n### Database Architecture\n- **Primary Database**: PostgreSQL via Neon serverless\n- **ORM**: Drizzle ORM with TypeScript schema definitions\n- **Schema Design**: \n  - User management with encrypted password storage\n  - AWS credentials with encrypted storage\n  - Email campaigns, templates, and recipient lists\n  - Email tracking events for opens, clicks, bounces, and complaints\n  - Session storage for authentication\n\n### Security Architecture\n- **Password Security**: Scrypt-based password hashing with salt\n- **Credential Encryption**: AES-256-GCM encryption for AWS credentials using session secret\n- **Session Security**: Secure HTTP-only cookies with CSRF protection\n- **Input Validation**: Zod schemas for runtime type checking and validation\n- **Authentication**: Session-based auth with automatic logout on unauthorized access\n\n### Email Service Architecture\n- **AWS Integration**: AWS SES SDK for email sending capabilities\n- **Email Tracking**: \n  - Tracking pixels for open tracking\n  - Unique redirect links for click tracking\n  - SNS integration for bounce/complaint notifications\n- **Mass Mailing**: CSV-based recipient management with bulk sending capabilities\n- **Template System**: Reusable email templates with variable substitution\n\n### Development Architecture\n- **Build System**: Vite for frontend, esbuild for backend bundling\n- **Development Server**: Hot module replacement with proxy setup\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Package Management**: npm with lockfile for reproducible builds\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: PostgreSQL database connection via Neon\n- **drizzle-orm**: TypeScript ORM for database operations\n- **express**: Web application framework\n- **passport**: Authentication middleware\n- **react**: Frontend UI library\n- **@tanstack/react-query**: Server state management\n\n### AWS Integration\n- **@aws-sdk/client-ses**: AWS Simple Email Service SDK for email operations\n\n### UI and Styling\n- **@radix-ui/***: Headless UI component primitives (20+ components)\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library\n- **class-variance-authority**: Component variant management\n- **clsx**: Conditional CSS class utility\n\n### Form and Validation\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n- **zod**: Runtime type validation and schema definition\n\n### Development Tools\n- **vite**: Frontend build tool and development server\n- **typescript**: Static type checking\n- **tsx**: TypeScript execution for development\n- **@replit/***: Replit-specific development plugins\n\n### Data Processing\n- **csv-parser**: CSV file parsing for recipient lists\n- **multer**: File upload middleware\n\n### Security and Encryption\n- **connect-pg-simple**: PostgreSQL session store\n- **crypto**: Built-in Node.js encryption utilities\n\n### Development and Replit Integration\n- **@replit/vite-plugin-***: Replit-specific development tools for error handling and debugging","size_bytes":4644},"client/src/components/aws/credentials-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Loader2 } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { AwsCredentialsForm } from \"@/lib/types\";\n\n// Form interface for validation (matches backend validation schema)\ninterface CredentialsValidationForm {\n  region: string;\n  accessKeyId: string;\n  secretAccessKey: string;\n}\n\nconst credentialsSchema = z.object({\n  region: z.string().min(1, \"Region is required\"),\n  accessKeyId: z.string().min(1, \"Access Key ID is required\"),\n  secretAccessKey: z.string().min(1, \"Secret Access Key is required\"),\n});\n\ninterface CredentialsModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst AWS_REGIONS = [\n  { value: \"us-east-1\", label: \"us-east-1 (N. Virginia)\" },\n  { value: \"us-west-2\", label: \"us-west-2 (Oregon)\" },\n  { value: \"eu-west-1\", label: \"eu-west-1 (Ireland)\" },\n  { value: \"ap-southeast-1\", label: \"ap-southeast-1 (Singapore)\" },\n  { value: \"ap-northeast-1\", label: \"ap-northeast-1 (Tokyo)\" },\n  { value: \"eu-central-1\", label: \"eu-central-1 (Frankfurt)\" },\n];\n\nexport default function CredentialsModal({ open, onOpenChange }: CredentialsModalProps) {\n  const { toast } = useToast();\n  const [saveCredentials, setSaveCredentials] = useState(true);\n\n  const form = useForm<CredentialsValidationForm>({\n    resolver: zodResolver(credentialsSchema),\n    defaultValues: {\n      region: \"\",\n      accessKeyId: \"\",\n      secretAccessKey: \"\",\n    },\n  });\n\n  const { data: existingCredentials } = useQuery({\n    queryKey: [\"/api/aws/credentials\"],\n    enabled: open,\n  });\n\n  const validateMutation = useMutation({\n    mutationFn: async (data: CredentialsValidationForm) => {\n      const response = await apiRequest(\"POST\", \"/api/aws/credentials/validate\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.valid) {\n        // If validation succeeds, save the credentials\n        saveCredentialsMutation.mutate(form.getValues());\n      } else {\n        toast({\n          title: \"Invalid Credentials\",\n          description: \"The provided AWS credentials are invalid. Please check and try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Validation Error\",\n        description: error.message || \"Failed to validate AWS credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveCredentialsMutation = useMutation({\n    mutationFn: async (data: CredentialsValidationForm) => {\n      // Convert field names to match backend schema for saving\n      const saveData: AwsCredentialsForm = {\n        region: data.region,\n        encryptedAccessKey: data.accessKeyId,\n        encryptedSecretKey: data.secretAccessKey,\n      };\n      await apiRequest(\"POST\", \"/api/aws/credentials\", saveData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AWS credentials saved and validated successfully\",\n      });\n      form.reset();\n      onOpenChange(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/aws/credentials\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save AWS credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteCredentialsMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/aws/credentials\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"AWS credentials removed successfully\",\n      });\n      onOpenChange(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/aws/credentials\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to remove AWS credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CredentialsValidationForm) => {\n    validateMutation.mutate(data);\n  };\n\n  const handleDeleteCredentials = () => {\n    if (confirm(\"Are you sure you want to remove your AWS credentials? This will disable email sending.\")) {\n      deleteCredentialsMutation.mutate();\n    }\n  };\n\n  const isLoading = validateMutation.isPending || saveCredentialsMutation.isPending;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Shield className=\"w-5 h-5\" />\n            AWS Credentials\n          </DialogTitle>\n          <DialogDescription>\n            {(existingCredentials as any)?.connected \n              ? \"Update your AWS SES credentials\"\n              : \"Configure your AWS SES credentials to start sending emails\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"region\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>AWS Region</FormLabel>\n                  <Select \n                    onValueChange={field.onChange} \n                    value={field.value}\n                    data-testid=\"select-aws-region\"\n                  >\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select AWS region...\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {AWS_REGIONS.map((region) => (\n                        <SelectItem key={region.value} value={region.value}>\n                          {region.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"accessKeyId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Access Key ID</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"text\"\n                      placeholder=\"AKIA...\"\n                      data-testid=\"input-access-key\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"secretAccessKey\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Secret Access Key</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"password\"\n                      placeholder=\"Enter secret key\"\n                      data-testid=\"input-secret-key\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox \n                id=\"saveCredentials\" \n                checked={saveCredentials}\n                onCheckedChange={(checked) => setSaveCredentials(!!checked)}\n                data-testid=\"checkbox-save-credentials\"\n              />\n              <Label htmlFor=\"saveCredentials\" className=\"text-sm\">\n                Save credentials securely (encrypted)\n              </Label>\n            </div>\n\n            <div className=\"bg-muted p-3 rounded-md\">\n              <p className=\"text-xs text-muted-foreground flex items-start gap-2\">\n                <Shield className=\"w-3 h-3 mt-0.5 flex-shrink-0\" />\n                Your AWS credentials are encrypted and stored securely. They are never exposed to the frontend.\n              </p>\n            </div>\n\n            <div className=\"flex space-x-3 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-credentials\"\n              >\n                Cancel\n              </Button>\n              \n              {(existingCredentials as any)?.connected && (\n                <Button\n                  type=\"button\"\n                  variant=\"destructive\"\n                  onClick={handleDeleteCredentials}\n                  disabled={deleteCredentialsMutation.isPending}\n                  data-testid=\"button-delete-credentials\"\n                >\n                  Remove\n                </Button>\n              )}\n              \n              <Button \n                type=\"submit\"\n                disabled={isLoading}\n                className=\"flex-1\"\n                data-testid=\"button-save-credentials\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                    {validateMutation.isPending ? \"Validating...\" : \"Saving...\"}\n                  </>\n                ) : (\n                  \"Connect\"\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11187},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AWS credentials storage\nexport const awsCredentials = pgTable(\"aws_credentials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  region: varchar(\"region\").notNull(),\n  encryptedAccessKey: text(\"encrypted_access_key\").notNull(),\n  encryptedSecretKey: text(\"encrypted_secret_key\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Email templates\nexport const emailTemplates = pgTable(\"email_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  variables: text(\"variables\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Recipient lists\nexport const recipientLists = pgTable(\"recipient_lists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Recipients\nexport const recipients = pgTable(\"recipients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  listId: varchar(\"list_id\").references(() => recipientLists.id, { onDelete: 'cascade' }).notNull(),\n  email: varchar(\"email\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  metadata: jsonb(\"metadata\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email campaigns\nexport const emailCampaigns = pgTable(\"email_campaigns\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: 'cascade' }).notNull(),\n  name: varchar(\"name\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  templateId: varchar(\"template_id\").references(() => emailTemplates.id),\n  recipientListId: varchar(\"recipient_list_id\").references(() => recipientLists.id),\n  status: varchar(\"status\").notNull().default('draft'), // draft, sending, sent, failed\n  scheduledAt: timestamp(\"scheduled_at\"),\n  sentAt: timestamp(\"sent_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Individual email sends\nexport const emailSends = pgTable(\"email_sends\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  campaignId: varchar(\"campaign_id\").references(() => emailCampaigns.id, { onDelete: 'cascade' }),\n  recipientEmail: varchar(\"recipient_email\").notNull(),\n  subject: varchar(\"subject\").notNull(),\n  content: text(\"content\").notNull(),\n  status: varchar(\"status\").notNull().default('pending'), // pending, sent, delivered, bounced, complained\n  messageId: varchar(\"message_id\"), // AWS SES message ID\n  sentAt: timestamp(\"sent_at\"),\n  deliveredAt: timestamp(\"delivered_at\"),\n  openedAt: timestamp(\"opened_at\"),\n  clickedAt: timestamp(\"clicked_at\"),\n  bouncedAt: timestamp(\"bounced_at\"),\n  complainedAt: timestamp(\"complained_at\"),\n  bounceReason: text(\"bounce_reason\"),\n  complaintReason: text(\"complaint_reason\"),\n  trackingPixelId: varchar(\"tracking_pixel_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Email tracking events\nexport const emailTrackingEvents = pgTable(\"email_tracking_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  emailSendId: varchar(\"email_send_id\").references(() => emailSends.id, { onDelete: 'cascade' }).notNull(),\n  eventType: varchar(\"event_type\").notNull(), // open, click, bounce, complaint, delivery\n  eventData: jsonb(\"event_data\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  awsCredentials: many(awsCredentials),\n  emailTemplates: many(emailTemplates),\n  recipientLists: many(recipientLists),\n  emailCampaigns: many(emailCampaigns),\n}));\n\nexport const awsCredentialsRelations = relations(awsCredentials, ({ one }) => ({\n  user: one(users, {\n    fields: [awsCredentials.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const emailTemplatesRelations = relations(emailTemplates, ({ one, many }) => ({\n  user: one(users, {\n    fields: [emailTemplates.userId],\n    references: [users.id],\n  }),\n  campaigns: many(emailCampaigns),\n}));\n\nexport const recipientListsRelations = relations(recipientLists, ({ one, many }) => ({\n  user: one(users, {\n    fields: [recipientLists.userId],\n    references: [users.id],\n  }),\n  recipients: many(recipients),\n  campaigns: many(emailCampaigns),\n}));\n\nexport const recipientsRelations = relations(recipients, ({ one }) => ({\n  list: one(recipientLists, {\n    fields: [recipients.listId],\n    references: [recipientLists.id],\n  }),\n}));\n\nexport const emailCampaignsRelations = relations(emailCampaigns, ({ one, many }) => ({\n  user: one(users, {\n    fields: [emailCampaigns.userId],\n    references: [users.id],\n  }),\n  template: one(emailTemplates, {\n    fields: [emailCampaigns.templateId],\n    references: [emailTemplates.id],\n  }),\n  recipientList: one(recipientLists, {\n    fields: [emailCampaigns.recipientListId],\n    references: [recipientLists.id],\n  }),\n  emailSends: many(emailSends),\n}));\n\nexport const emailSendsRelations = relations(emailSends, ({ one, many }) => ({\n  campaign: one(emailCampaigns, {\n    fields: [emailSends.campaignId],\n    references: [emailCampaigns.id],\n  }),\n  trackingEvents: many(emailTrackingEvents),\n}));\n\nexport const emailTrackingEventsRelations = relations(emailTrackingEvents, ({ one }) => ({\n  emailSend: one(emailSends, {\n    fields: [emailTrackingEvents.emailSendId],\n    references: [emailSends.id],\n  }),\n}));\n\n// Export types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertAwsCredentials = typeof awsCredentials.$inferInsert;\nexport type AwsCredentials = typeof awsCredentials.$inferSelect;\n\nexport type InsertEmailTemplate = typeof emailTemplates.$inferInsert;\nexport type EmailTemplate = typeof emailTemplates.$inferSelect;\n\nexport type InsertRecipientList = typeof recipientLists.$inferInsert;\nexport type RecipientList = typeof recipientLists.$inferSelect;\n\nexport type InsertRecipient = typeof recipients.$inferInsert;\nexport type Recipient = typeof recipients.$inferSelect;\n\nexport type InsertEmailCampaign = typeof emailCampaigns.$inferInsert;\nexport type EmailCampaign = typeof emailCampaigns.$inferSelect;\n\nexport type InsertEmailSend = typeof emailSends.$inferInsert;\nexport type EmailSend = typeof emailSends.$inferSelect;\n\nexport type InsertEmailTrackingEvent = typeof emailTrackingEvents.$inferInsert;\nexport type EmailTrackingEvent = typeof emailTrackingEvents.$inferSelect;\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAwsCredentialsSchema = createInsertSchema(awsCredentials).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailTemplateSchema = createInsertSchema(emailTemplates).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRecipientListSchema = createInsertSchema(recipientLists).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRecipientSchema = createInsertSchema(recipients).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEmailCampaignSchema = createInsertSchema(emailCampaigns).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailSendSchema = createInsertSchema(emailSends).omit({\n  id: true,\n  createdAt: true,\n});\n","size_bytes":9056},"client/src/lib/types.ts":{"content":"export interface EmailStats {\n  totalSent: number;\n  totalDelivered: number;\n  totalOpened: number;\n  totalClicked: number;\n  totalBounced: number;\n  totalComplained: number;\n}\n\nexport interface EmailSendRecord {\n  id: string;\n  campaignId?: string;\n  recipientEmail: string;\n  subject: string;\n  status: 'pending' | 'sent' | 'delivered' | 'bounced' | 'complained' | 'failed';\n  sentAt?: string;\n  deliveredAt?: string;\n  openedAt?: string;\n  clickedAt?: string;\n  bouncedAt?: string;\n  complainedAt?: string;\n  bounceReason?: string;\n  complaintReason?: string;\n  createdAt: string;\n}\n\nexport interface QuickSendForm {\n  to: string;\n  subject: string;\n  content: string;\n  from: string;\n}\n\nexport interface BulkSendForm {\n  subject: string;\n  content: string;\n  recipientListId: string;\n  from: string;\n}\n\nexport interface AwsCredentialsForm {\n  region: string;\n  encryptedAccessKey: string;\n  encryptedSecretKey: string;\n}\n\nexport interface TemplateForm {\n  name: string;\n  subject: string;\n  content: string;\n  variables: string[];\n}\n\nexport interface RecipientListForm {\n  name: string;\n  description: string;\n}\n","size_bytes":1116},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Landing from \"@/pages/landing\";\nimport LoginPage from \"@/pages/login-page\";\nimport SignupPage from \"@/pages/signup-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SendEmail from \"@/pages/send-email\";\nimport Templates from \"@/pages/templates\";\nimport Recipients from \"@/pages/recipients\";\nimport Analytics from \"@/pages/analytics\";\nimport Settings from \"@/pages/settings\";\nimport SESDashboard from \"@/pages/ses-dashboard\";\nimport Domains from \"@/pages/domains\";\nimport EmailVerification from \"@/pages/email-verification\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/login\" component={LoginPage} />\n      <Route path=\"/signup\" component={SignupPage} />\n      <Route path=\"/\" component={Landing} />\n      <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\n      <ProtectedRoute path=\"/send-email\" component={SendEmail} />\n      <ProtectedRoute path=\"/templates\" component={Templates} />\n      <ProtectedRoute path=\"/recipients\" component={Recipients} />\n      <ProtectedRoute path=\"/analytics\" component={Analytics} />\n      <ProtectedRoute path=\"/ses-dashboard\" component={SESDashboard} />\n      <ProtectedRoute path=\"/domains\" component={Domains} />\n      <ProtectedRoute path=\"/email-verification\" component={EmailVerification} />\n      <ProtectedRoute path=\"/settings\" component={Settings} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2073},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n    hmr: {\n      port: 443,\n    },\n    proxy: {\n      '/api': {\n        target: 'http://127.0.0.1:5000',\n        changeOrigin: true,\n        secure: false,\n        ws: true,\n      },\n    },\n  },\n});\n","size_bytes":1270},"server/storage.ts":{"content":"import {\n  users,\n  awsCredentials,\n  emailTemplates,\n  recipientLists,\n  recipients,\n  emailCampaigns,\n  emailSends,\n  emailTrackingEvents,\n  type User,\n  type UpsertUser,\n  type AwsCredentials,\n  type InsertAwsCredentials,\n  type EmailTemplate,\n  type InsertEmailTemplate,\n  type RecipientList,\n  type InsertRecipientList,\n  type Recipient,\n  type InsertRecipient,\n  type EmailCampaign,\n  type InsertEmailCampaign,\n  type EmailSend,\n  type InsertEmailSend,\n  type EmailTrackingEvent,\n  type InsertEmailTrackingEvent,\n  insertUserSchema,\n} from \"@shared/schema\";\nimport { prisma } from \"./db\";\nimport session from \"express-session\";\nimport { z } from \"zod\";\n\ntype InsertUser = z.infer<typeof insertUserSchema>;\n\nexport interface IStorage {\n  // Session store for authentication\n  sessionStore: session.Store;\n\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // AWS credentials operations\n  getAwsCredentials(userId: string): Promise<AwsCredentials | undefined>;\n  upsertAwsCredentials(credentials: InsertAwsCredentials & { userId: string }): Promise<AwsCredentials>;\n  deleteAwsCredentials(userId: string): Promise<void>;\n\n  // Email template operations\n  getEmailTemplates(userId: string): Promise<EmailTemplate[]>;\n  getEmailTemplate(id: string, userId: string): Promise<EmailTemplate | undefined>;\n  createEmailTemplate(template: InsertEmailTemplate & { userId: string }): Promise<EmailTemplate>;\n  updateEmailTemplate(id: string, userId: string, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate>;\n  deleteEmailTemplate(id: string, userId: string): Promise<void>;\n\n  // Recipient list operations\n  getRecipientLists(userId: string): Promise<RecipientList[]>;\n  getRecipientList(id: string, userId: string): Promise<RecipientList | undefined>;\n  createRecipientList(list: InsertRecipientList & { userId: string }): Promise<RecipientList>;\n  updateRecipientList(id: string, userId: string, list: Partial<InsertRecipientList>): Promise<RecipientList>;\n  deleteRecipientList(id: string, userId: string): Promise<void>;\n\n  // Recipient operations\n  getRecipients(listId: string, userId: string): Promise<Recipient[]>;\n  createRecipients(recipients: InsertRecipient[]): Promise<Recipient[]>;\n  deleteRecipients(listId: string): Promise<void>;\n\n  // Email campaign operations\n  getEmailCampaigns(userId: string): Promise<EmailCampaign[]>;\n  getEmailCampaign(id: string, userId: string): Promise<EmailCampaign | undefined>;\n  createEmailCampaign(campaign: InsertEmailCampaign & { userId: string }): Promise<EmailCampaign>;\n  updateEmailCampaign(id: string, userId: string, campaign: Partial<InsertEmailCampaign>): Promise<EmailCampaign>;\n  deleteEmailCampaign(id: string, userId: string): Promise<void>;\n\n  // Email send operations\n  createEmailSend(emailSend: InsertEmailSend): Promise<EmailSend>;\n  updateEmailSend(id: string, updates: Partial<InsertEmailSend>): Promise<EmailSend>;\n  getEmailSends(userId: string, limit?: number): Promise<EmailSend[]>;\n  getEmailSendsByCampaign(campaignId: string): Promise<EmailSend[]>;\n\n  // Email tracking operations\n  createTrackingEvent(event: InsertEmailTrackingEvent): Promise<EmailTrackingEvent>;\n  getEmailSendByTrackingPixel(trackingPixelId: string): Promise<EmailSend | undefined>;\n  getEmailSendByMessageId(messageId: string): Promise<EmailSend | undefined>;\n\n  // Analytics operations\n  getEmailStats(userId: string): Promise<{\n    totalSent: number;\n    totalDelivered: number;\n    totalOpened: number;\n    totalClicked: number;\n    totalBounced: number;\n    totalComplained: number;\n  }>;\n\n  getEmailTimeSeriesData(userId: string, days: number, campaignId?: string): Promise<Array<{\n    date: string;\n    sent: number;\n    delivered: number;\n    opened: number;\n    clicked: number;\n    bounced: number;\n    complained: number;\n  }>>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    // Use default memory store for development\n    this.sessionStore = new session.MemoryStore();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const user = await prisma.user.findUnique({ where: { id } });\n    if (!user) return undefined;\n    return {\n      id: user.id,\n      email: user.email,\n      password: user.password,\n      firstName: user.first_name,\n      lastName: user.last_name,\n      profileImageUrl: user.profile_image_url,\n      createdAt: user.created_at,\n      updatedAt: user.updated_at,\n    };\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const user = await prisma.user.findUnique({ where: { email } });\n    if (!user) return undefined;\n    return {\n      id: user.id,\n      email: user.email,\n      password: user.password,\n      firstName: user.first_name,\n      lastName: user.last_name,\n      profileImageUrl: user.profile_image_url,\n      createdAt: user.created_at,\n      updatedAt: user.updated_at,\n    };\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const user = await prisma.user.create({\n      data: {\n        email: userData.email,\n        password: userData.password,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        profile_image_url: userData.profileImageUrl,\n        // created_at and updated_at are set by default in schema\n      },\n    });\n    return {\n      id: user.id,\n      email: user.email,\n      password: user.password,\n      firstName: user.first_name,\n      lastName: user.last_name,\n      profileImageUrl: user.profile_image_url,\n      createdAt: user.created_at,\n      updatedAt: user.updated_at,\n    };\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const user = await prisma.user.upsert({\n      where: { id: userData.id },\n      update: {\n        email: userData.email,\n        password: userData.password,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        profile_image_url: userData.profileImageUrl,\n        updated_at: new Date(),\n      },\n      create: {\n        id: userData.id,\n        email: userData.email,\n        password: userData.password,\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        profile_image_url: userData.profileImageUrl,\n        created_at: userData.createdAt ?? new Date(),\n        updated_at: userData.updatedAt ?? new Date(),\n      },\n    });\n    return {\n      id: user.id,\n      email: user.email,\n      password: user.password,\n      firstName: user.first_name,\n      lastName: user.last_name,\n      profileImageUrl: user.profile_image_url,\n      createdAt: user.created_at,\n      updatedAt: user.updated_at,\n    };\n  }\n\n  // AWS credentials operations\n\n  async getAwsCredentials(userId: string): Promise<AwsCredentials | undefined> {\n  const creds = await prisma.awsCredential.findFirst({ where: { user_id: userId } });\n    if (!creds) return undefined;\n    return {\n      id: creds.id,\n      userId: creds.user_id,\n      region: creds.region,\n      encryptedAccessKey: creds.encrypted_access_key,\n      encryptedSecretKey: creds.encrypted_secret_key,\n      createdAt: creds.created_at,\n      updatedAt: creds.updated_at,\n    };\n  }\n\n  async upsertAwsCredentials(credentials: InsertAwsCredentials & { userId: string }): Promise<AwsCredentials> {\n    // Upsert by user_id is not supported by Prisma, so find first then update or create\n    const existing = await prisma.awsCredential.findFirst({ where: { user_id: credentials.userId } });\n    let creds;\n    if (existing) {\n      creds = await prisma.awsCredential.update({\n        where: { id: existing.id },\n        data: {\n          region: credentials.region,\n          encrypted_access_key: credentials.encryptedAccessKey,\n          encrypted_secret_key: credentials.encryptedSecretKey,\n          updated_at: new Date(),\n        },\n      });\n    } else {\n      creds = await prisma.awsCredential.create({\n        data: {\n          user_id: credentials.userId,\n          region: credentials.region,\n          encrypted_access_key: credentials.encryptedAccessKey,\n          encrypted_secret_key: credentials.encryptedSecretKey,\n          created_at: new Date(),\n          updated_at: new Date(),\n        },\n      });\n    }\n    return {\n      id: creds.id,\n      userId: creds.user_id,\n      region: creds.region,\n      encryptedAccessKey: creds.encrypted_access_key,\n      encryptedSecretKey: creds.encrypted_secret_key,\n      createdAt: creds.created_at,\n      updatedAt: creds.updated_at,\n    };\n  }\n\n  async deleteAwsCredentials(userId: string): Promise<void> {\n    const existing = await prisma.awsCredential.findFirst({ where: { user_id: userId } });\n    if (existing) {\n      await prisma.awsCredential.delete({ where: { id: existing.id } });\n    }\n  }\n\n  // Email template operations\n\n  async getEmailTemplates(userId: string): Promise<EmailTemplate[]> {\n    const templates = await prisma.emailTemplate.findMany({\n      where: { user_id: userId },\n      orderBy: { created_at: 'desc' },\n    });\n    return templates.map(t => ({\n      id: t.id,\n      userId: t.user_id,\n      name: t.name,\n      subject: t.subject,\n      content: t.content,\n      variables: t.variables,\n      createdAt: t.created_at,\n      updatedAt: t.updated_at,\n    }));\n  }\n\n  async getEmailTemplate(id: string, userId: string): Promise<EmailTemplate | undefined> {\n    const t = await prisma.emailTemplate.findUnique({ where: { id } });\n    if (!t || t.user_id !== userId) return undefined;\n    return {\n      id: t.id,\n      userId: t.user_id,\n      name: t.name,\n      subject: t.subject,\n      content: t.content,\n      variables: t.variables,\n      createdAt: t.created_at,\n      updatedAt: t.updated_at,\n    };\n  }\n\n  async createEmailTemplate(template: InsertEmailTemplate & { userId: string }): Promise<EmailTemplate> {\n    const t = await prisma.emailTemplate.create({\n      data: {\n        user_id: template.userId,\n        name: template.name,\n        subject: template.subject,\n        content: template.content,\n        variables: template.variables ?? [],\n        created_at: new Date(),\n        updated_at: new Date(),\n      },\n    });\n    return {\n      id: t.id,\n      userId: t.user_id,\n      name: t.name,\n      subject: t.subject,\n      content: t.content,\n      variables: t.variables,\n      createdAt: t.created_at,\n      updatedAt: t.updated_at,\n    };\n  }\n\n  async updateEmailTemplate(id: string, userId: string, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate> {\n    // Ensure variables is never null\n    const updateData = {\n      ...template,\n      variables: template.variables ?? undefined,\n      updated_at: new Date(),\n    };\n    const t = await prisma.emailTemplate.update({\n      where: { id },\n      data: updateData,\n    });\n    return {\n      id: t.id,\n      userId: t.user_id,\n      name: t.name,\n      subject: t.subject,\n      content: t.content,\n      variables: t.variables,\n      createdAt: t.created_at,\n      updatedAt: t.updated_at,\n    };\n  }\n\n  async deleteEmailTemplate(id: string, userId: string): Promise<void> {\n    await prisma.emailTemplate.delete({ where: { id } });\n  }\n\n  // Recipient list operations\n\n  async getRecipientLists(userId: string): Promise<RecipientList[]> {\n    const lists = await prisma.recipientList.findMany({\n      where: { user_id: userId },\n      orderBy: { created_at: 'desc' },\n    });\n    return lists.map(l => ({\n      id: l.id,\n      userId: l.user_id,\n      name: l.name,\n      description: l.description,\n      createdAt: l.created_at,\n      updatedAt: l.updated_at,\n    }));\n  }\n\n  async getRecipientList(id: string, userId: string): Promise<RecipientList | undefined> {\n    const l = await prisma.recipientList.findUnique({ where: { id } });\n    if (!l || l.user_id !== userId) return undefined;\n    return {\n      id: l.id,\n      userId: l.user_id,\n      name: l.name,\n      description: l.description,\n      createdAt: l.created_at,\n      updatedAt: l.updated_at,\n    };\n  }\n\n  async createRecipientList(list: InsertRecipientList & { userId: string }): Promise<RecipientList> {\n    const l = await prisma.recipientList.create({\n      data: {\n        user_id: list.userId,\n        name: list.name,\n        description: list.description,\n        created_at: new Date(),\n        updated_at: new Date(),\n      },\n    });\n    return {\n      id: l.id,\n      userId: l.user_id,\n      name: l.name,\n      description: l.description,\n      createdAt: l.created_at,\n      updatedAt: l.updated_at,\n    };\n  }\n\n  async updateRecipientList(id: string, userId: string, list: Partial<InsertRecipientList>): Promise<RecipientList> {\n    const l = await prisma.recipientList.update({\n      where: { id },\n      data: {\n        ...list,\n        updated_at: new Date(),\n      },\n    });\n    return {\n      id: l.id,\n      userId: l.user_id,\n      name: l.name,\n      description: l.description,\n      createdAt: l.created_at,\n      updatedAt: l.updated_at,\n    };\n  }\n\n  async deleteRecipientList(id: string, userId: string): Promise<void> {\n    await prisma.recipientList.delete({ where: { id } });\n  }\n\n  // Recipient operations\n\n  async getRecipients(listId: string, userId: string): Promise<Recipient[]> {\n    // Verify the list belongs to the user\n    const list = await this.getRecipientList(listId, userId);\n    if (!list) {\n      throw new Error('Recipient list not found');\n    }\n    const recs = await prisma.recipient.findMany({\n      where: { list_id: listId },\n      orderBy: { created_at: 'desc' },\n    });\n    return recs.map(r => ({\n      id: r.id,\n      listId: r.list_id,\n      email: r.email,\n      firstName: r.first_name,\n      lastName: r.last_name,\n      metadata: r.metadata,\n      isActive: r.is_active,\n      createdAt: r.created_at,\n    }));\n  }\n\n  async createRecipients(recipientData: InsertRecipient[]): Promise<Recipient[]> {\n    // Map listId to list_id for Prisma\n    const mappedData = recipientData.map(r => ({\n      email: r.email,\n      list_id: r.listId,\n      first_name: r.firstName,\n      last_name: r.lastName,\n      metadata: r.metadata ?? null,\n      is_active: r.isActive,\n      created_at: r.createdAt ?? new Date(),\n    }));\n    await prisma.recipient.createMany({ data: mappedData as any });\n    // Return all recipients for the list (since createMany doesn't return inserted rows)\n    if (recipientData.length > 0) {\n      // Find the userId from the first recipient's listId\n      const listId = recipientData[0].listId;\n      const list = await prisma.recipientList.findUnique({ where: { id: listId } });\n      if (!list) {\n        console.error(`[createRecipients] Recipient list not found for listId: ${listId}`);\n      } else {\n        console.log(`[createRecipients] Found recipient list: ${listId}, userId: ${list.user_id}`);\n      }\n      const userId = list ? list.user_id : \"\";\n      return this.getRecipients(listId, userId);\n    }\n    return [];\n  }\n\n  async deleteRecipients(listId: string): Promise<void> {\n    await prisma.recipient.deleteMany({ where: { list_id: listId } });\n  }\n\n  // Email campaign operations\n\n  async getEmailCampaigns(userId: string): Promise<EmailCampaign[]> {\n    const campaigns = await prisma.emailCampaign.findMany({\n      where: { user_id: userId },\n      orderBy: { created_at: 'desc' },\n    });\n    return campaigns.map(c => ({\n      id: c.id,\n      userId: c.user_id,\n      name: c.name,\n      subject: c.subject,\n      content: c.content,\n      templateId: c.template_id,\n      recipientListId: c.recipient_list_id,\n      status: c.status,\n      scheduledAt: c.scheduled_at,\n      sentAt: c.sent_at,\n      createdAt: c.created_at,\n      updatedAt: c.updated_at,\n    }));\n  }\n\n  async getEmailCampaign(id: string, userId: string): Promise<EmailCampaign | undefined> {\n    const c = await prisma.emailCampaign.findUnique({ where: { id } });\n    if (!c || c.user_id !== userId) return undefined;\n    return {\n      id: c.id,\n      userId: c.user_id,\n      name: c.name,\n      subject: c.subject,\n      content: c.content,\n      templateId: c.template_id,\n      recipientListId: c.recipient_list_id,\n      status: c.status,\n      scheduledAt: c.scheduled_at,\n      sentAt: c.sent_at,\n      createdAt: c.created_at,\n      updatedAt: c.updated_at,\n    };\n  }\n\n  async createEmailCampaign(campaign: InsertEmailCampaign & { userId: string }): Promise<EmailCampaign> {\n    const c = await prisma.emailCampaign.create({\n      data: {\n        user_id: campaign.userId,\n        name: campaign.name,\n        subject: campaign.subject,\n        content: campaign.content,\n        template_id: campaign.templateId,\n        recipient_list_id: campaign.recipientListId,\n        status: campaign.status ?? 'draft',\n        scheduled_at: campaign.scheduledAt,\n        sent_at: campaign.sentAt,\n        created_at: new Date(),\n        updated_at: new Date(),\n      },\n    });\n    return {\n      id: c.id,\n      userId: c.user_id,\n      name: c.name,\n      subject: c.subject,\n      content: c.content,\n      templateId: c.template_id,\n      recipientListId: c.recipient_list_id,\n      status: c.status,\n      scheduledAt: c.scheduled_at,\n      sentAt: c.sent_at,\n      createdAt: c.created_at,\n      updatedAt: c.updated_at,\n    };\n  }\n\n  async updateEmailCampaign(id: string, userId: string, campaign: Partial<InsertEmailCampaign>): Promise<EmailCampaign> {\n    const c = await prisma.emailCampaign.update({\n      where: { id },\n      data: {\n        ...campaign,\n        updated_at: new Date(),\n      },\n    });\n    return {\n      id: c.id,\n      userId: c.user_id,\n      name: c.name,\n      subject: c.subject,\n      content: c.content,\n      templateId: c.template_id,\n      recipientListId: c.recipient_list_id,\n      status: c.status,\n      scheduledAt: c.scheduled_at,\n      sentAt: c.sent_at,\n      createdAt: c.created_at,\n      updatedAt: c.updated_at,\n    };\n  }\n\n  async deleteEmailCampaign(id: string, userId: string): Promise<void> {\n    await prisma.emailCampaign.delete({ where: { id } });\n  }\n\n  // Email send operations\n\n  async createEmailSend(emailSend: InsertEmailSend): Promise<EmailSend> {\n    const sendData: any = {\n      recipient_email: emailSend.recipientEmail,\n      subject: emailSend.subject,\n      content: emailSend.content,\n      status: emailSend.status ?? 'pending',\n      message_id: emailSend.messageId,\n      sent_at: emailSend.sentAt,\n      delivered_at: emailSend.deliveredAt,\n      opened_at: emailSend.openedAt,\n      clicked_at: emailSend.clickedAt,\n      bounced_at: emailSend.bouncedAt,\n      complained_at: emailSend.complainedAt,\n      bounce_reason: emailSend.bounceReason,\n      complaint_reason: emailSend.complaintReason,\n      tracking_pixel_id: emailSend.trackingPixelId,\n      created_at: new Date(),\n    };\n    if (emailSend.campaignId) sendData.campaign_id = emailSend.campaignId;\n    const e = await prisma.emailSend.create({ data: sendData });\n    return {\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    };\n  }\n\n  async updateEmailSend(id: string, updates: Partial<InsertEmailSend>): Promise<EmailSend> {\n    const e = await prisma.emailSend.update({\n      where: { id },\n      data: updates,\n    });\n    return {\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    };\n  }\n\n  async getEmailSends(userId: string, limit = 50): Promise<EmailSend[]> {\n    const sends = await prisma.emailSend.findMany({\n      where: {\n        campaign: { user_id: userId },\n      },\n      orderBy: { created_at: 'desc' },\n      take: limit,\n    });\n    return sends.map(e => ({\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    }));\n  }\n\n  async getEmailSendsByCampaign(campaignId: string): Promise<EmailSend[]> {\n    const sends = await prisma.emailSend.findMany({\n      where: { campaign_id: campaignId },\n      orderBy: { created_at: 'desc' },\n    });\n    return sends.map(e => ({\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    }));\n  }\n\n  // Email tracking operations\n\n  async createTrackingEvent(event: InsertEmailTrackingEvent): Promise<EmailTrackingEvent> {\n    const t = await prisma.emailTrackingEvent.create({\n      data: {\n        email_send_id: event.emailSendId,\n        event_type: event.eventType,\n  event_data: event.eventData as any,\n        timestamp: event.timestamp ?? new Date(),\n      },\n    });\n    return {\n      id: t.id,\n      emailSendId: t.email_send_id,\n      eventType: t.event_type,\n      eventData: t.event_data,\n      timestamp: t.timestamp,\n    };\n  }\n\n  async getEmailSendByTrackingPixel(trackingPixelId: string): Promise<EmailSend | undefined> {\n    const e = await prisma.emailSend.findFirst({ where: { tracking_pixel_id: trackingPixelId } });\n    if (!e) return undefined;\n    return {\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    };\n  }\n\n  async getEmailSendByMessageId(messageId: string): Promise<EmailSend | undefined> {\n    const e = await prisma.emailSend.findFirst({ where: { message_id: messageId } });\n    if (!e) return undefined;\n    return {\n      id: e.id,\n      campaignId: e.campaign_id,\n      recipientEmail: e.recipient_email,\n      subject: e.subject,\n      content: e.content,\n      status: e.status,\n      messageId: e.message_id,\n      sentAt: e.sent_at,\n      deliveredAt: e.delivered_at,\n      openedAt: e.opened_at,\n      clickedAt: e.clicked_at,\n      bouncedAt: e.bounced_at,\n      complainedAt: e.complained_at,\n      bounceReason: e.bounce_reason,\n      complaintReason: e.complaint_reason,\n      trackingPixelId: e.tracking_pixel_id,\n      createdAt: e.created_at,\n    };\n  }\n\n  // Analytics operations\n\n  async getEmailStats(userId: string): Promise<{\n    totalSent: number;\n    totalDelivered: number;\n    totalOpened: number;\n    totalClicked: number;\n    totalBounced: number;\n    totalComplained: number;\n  }> {\n    const totalSent = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId } },\n    });\n    const totalDelivered = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId }, status: 'delivered' },\n    });\n    const totalOpened = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId }, opened_at: { not: null } },\n    });\n    const totalClicked = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId }, clicked_at: { not: null } },\n    });\n    const totalBounced = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId }, status: 'bounced' },\n    });\n    const totalComplained = await prisma.emailSend.count({\n      where: { campaign: { user_id: userId }, status: 'complained' },\n    });\n    return {\n      totalSent,\n      totalDelivered,\n      totalOpened,\n      totalClicked,\n      totalBounced,\n      totalComplained,\n    };\n  }\n\n  async getEmailTimeSeriesData(userId: string, days: number, campaignId?: string): Promise<Array<{\n    date: string;\n    sent: number;\n    delivered: number;\n    opened: number;\n    clicked: number;\n    bounced: number;\n    complained: number;\n  }>> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    startDate.setHours(0, 0, 0, 0);\n\n    // Build where clause based on campaign filter\n    const whereClause: any = {\n      created_at: { gte: startDate }\n    };\n\n    if (campaignId) {\n      whereClause.campaign_id = campaignId;\n    } else {\n      whereClause.campaign = { user_id: userId };\n    }\n\n    // Get all email sends for the date range\n    const emailSends = await prisma.emailSend.findMany({\n      where: whereClause,\n      orderBy: { created_at: 'asc' },\n    });\n\n    // Group by date\n    const dataByDate: Record<string, {\n      sent: number;\n      delivered: number;\n      opened: number;\n      clicked: number;\n      bounced: number;\n      complained: number;\n    }> = {};\n\n    // Initialize all dates in range\n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - 1 - i));\n      const dateStr = date.toISOString().split('T')[0];\n      dataByDate[dateStr] = {\n        sent: 0,\n        delivered: 0,\n        opened: 0,\n        clicked: 0,\n        bounced: 0,\n        complained: 0,\n      };\n    }\n\n    // Aggregate data by date\n    emailSends.forEach(send => {\n      const dateStr = send.created_at.toISOString().split('T')[0];\n      if (dataByDate[dateStr]) {\n        dataByDate[dateStr].sent++;\n        if (send.status === 'delivered' || send.delivered_at) dataByDate[dateStr].delivered++;\n        if (send.opened_at) dataByDate[dateStr].opened++;\n        if (send.clicked_at) dataByDate[dateStr].clicked++;\n        if (send.status === 'bounced' || send.bounced_at) dataByDate[dateStr].bounced++;\n        if (send.status === 'complained' || send.complained_at) dataByDate[dateStr].complained++;\n      }\n    });\n\n    // Convert to array format\n    return Object.entries(dataByDate)\n      .map(([date, data]) => ({ date, ...data }))\n      .sort((a, b) => a.date.localeCompare(b.date));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":27464},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport StatsCards from \"@/components/dashboard/stats-cards\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport RecentCampaigns from \"@/components/dashboard/recent-campaigns\";\nimport EmailComposer from \"@/components/email/email-composer\";\nimport EmailTrackingTable from \"@/components/tracking/email-tracking-table\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { user, isLoading, error } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: error ? error.message : \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, error, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (error && !user) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg text-red-500\">{error.message}</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Dashboard\" \n          description=\"Monitor your email campaigns and AWS SES usage\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <StatsCards />\n          \n          <QuickActions />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <RecentCampaigns />\n            <EmailComposer />\n          </div>\n          \n          <EmailTrackingTable />\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2073},"client/src/components/email/email-composer.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { NotebookPen, Save, Upload } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport RichTextEditor from \"./rich-text-editor\";\nimport type { QuickSendForm } from \"@/lib/types\";\n\nconst quickSendSchema = z.object({\n  to: z.string().email(\"Please enter a valid email address\"),\n  subject: z.string().min(1, \"Subject is required\"),\n  content: z.string().min(1, \"Content is required\"),\n  from: z.string().email(\"Please enter a valid from email address\"),\n});\n\ninterface EmailComposerProps {\n  showHeader?: boolean;\n}\n\nexport default function EmailComposer({ showHeader = true }: EmailComposerProps) {\n  const { toast } = useToast();\n\n  const form = useForm<QuickSendForm>({\n    resolver: zodResolver(quickSendSchema),\n    defaultValues: {\n      to: \"\",\n      subject: \"\",\n      content: \"\",\n      from: \"\",\n    },\n  });\n\n  const sendEmailMutation = useMutation({\n    mutationFn: async (data: QuickSendForm) => {\n      await apiRequest(\"POST\", \"/api/email/send\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Email sent successfully\",\n      });\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-sends\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send email\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleQuickSend = (data: QuickSendForm) => {\n    sendEmailMutation.mutate(data);\n  };\n\n  const content = (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleQuickSend)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"from\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>From</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"email\"\n                  placeholder=\"your-email@example.com\"\n                  data-testid=\"input-email-from\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"subject\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Subject</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter email subject\"\n                  data-testid=\"input-email-subject\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"to\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Recipients</FormLabel>\n              <div className=\"flex space-x-2\">\n                <FormControl>\n                  <Input \n                    type=\"email\"\n                    placeholder=\"recipient@example.com\"\n                    className=\"flex-1\"\n                    data-testid=\"input-email-recipient\"\n                    {...field}\n                  />\n                </FormControl>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\"\n                  data-testid=\"button-upload-recipients\"\n                >\n                  <Upload className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"content\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Message</FormLabel>\n              <FormControl>\n                <RichTextEditor\n                  value={field.value}\n                  onChange={field.onChange}\n                  placeholder=\"Enter your message...\"\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex space-x-3\">\n          <Button \n            type=\"submit\"\n            className=\"flex-1\"\n            disabled={sendEmailMutation.isPending}\n            data-testid=\"button-send-email\"\n          >\n            {sendEmailMutation.isPending ? (\n              <>\n                <NotebookPen className=\"w-4 h-4 mr-2 animate-pulse\" />\n                Sending...\n              </>\n            ) : (\n              <>\n                <NotebookPen className=\"w-4 h-4 mr-2\" />\n                Send Now\n              </>\n            )}\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\"\n            data-testid=\"button-save-draft\"\n          >\n            <Save className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  if (!showHeader) {\n    return content;\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Quick Send</CardTitle>\n        <CardDescription>\n          Send a quick email to one or more recipients\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        {content}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6193},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/pages/login-page.tsx":{"content":"// Login page - redirects to dashboard on success\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Mail, BarChart3, Shield, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Redirect, Link } from \"wouter\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const { user, loginMutation } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  const onLogin = (data: LoginData) => {\n    try {\n      console.log('Submitting login:', { email: data.email, hasPassword: !!data.password });\n      loginMutation.mutate(data);\n    } catch (error) {\n      console.error('Login submission error:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Left Column - Login Form */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"bg-primary text-primary-foreground w-16 h-16 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-8 h-8\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">SES Manager</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Sign in to your account\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Welcome back</CardTitle>\n              <CardDescription>\n                Enter your email and password to access your account\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...loginForm}>\n                <form onSubmit={loginForm.handleSubmit(onLogin)} className=\"space-y-4\">\n                  <FormField\n                    control={loginForm.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"email\"\n                            placeholder=\"Enter your email\"\n                            data-testid=\"input-login-email\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={loginForm.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Input\n                              type={showPassword ? \"text\" : \"password\"}\n                              placeholder=\"Enter your password\"\n                              data-testid=\"input-login-password\"\n                              {...field}\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                              onClick={() => setShowPassword(!showPassword)}\n                              data-testid=\"button-toggle-password\"\n                            >\n                              {showPassword ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full\" \n                    disabled={loginMutation.isPending}\n                    data-testid=\"button-login-submit\"\n                  >\n                    {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                  </Button>\n                </form>\n              </Form>\n              <div className=\"mt-4 text-center\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Don't have an account?{\" \"}\n                  <Link href=\"/signup\" className=\"text-primary hover:underline\" data-testid=\"link-signup\">\n                    Sign up\n                  </Link>\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 bg-muted p-8 items-center justify-center\">\n        <div className=\"max-w-md text-center space-y-6\">\n          <h2 className=\"text-3xl font-bold\">Powerful Email Management</h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Take control of your email campaigns with our comprehensive SES management platform.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 text-blue-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Mass Email Sending</h3>\n                <p className=\"text-sm text-muted-foreground\">Send personalized emails to thousands</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-green-100 text-green-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Advanced Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">Track opens, clicks, and engagement</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-purple-100 text-purple-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Secure & Reliable</h3>\n                <p className=\"text-sm text-muted-foreground\">Enterprise-grade security and encryption</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7775},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/auth-page.tsx":{"content":"// Based on blueprint:javascript_auth_all_persistance - Professional authentication page\nimport { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Mail, Shield, BarChart3, Users, Zap, CheckCircle, Eye, EyeOff } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Redirect } from \"wouter\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\ntype RegisterData = z.infer<typeof registerSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n\n  const loginForm = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  // Redirect if already logged in (after all hooks)\n  if (user) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  const onLogin = (data: LoginData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterData) => {\n    const { confirmPassword, ...registerData } = data;\n    registerMutation.mutate(registerData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      {/* Left Column - Authentication Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-8\">\n          <div className=\"text-center\">\n            <div className=\"flex justify-center mb-6\">\n              <div className=\"bg-primary text-primary-foreground w-16 h-16 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-8 h-8\" />\n              </div>\n            </div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">SES Manager</h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Sign in to your account or create a new one\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Sign Up</TabsTrigger>\n            </TabsList>\n\n            {/* Login Form */}\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Welcome back</CardTitle>\n                  <CardDescription>\n                    Enter your email and password to access your account\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={(e) => {\n                      e.preventDefault();\n                      loginForm.handleSubmit(onLogin)(e);\n                    }} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"email\"\n                                placeholder=\"Enter your email\"\n                                data-testid=\"input-login-email\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Enter your password\"\n                                  data-testid=\"input-login-password\"\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  data-testid=\"button-toggle-password\"\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login-submit\"\n                      >\n                        {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Register Form */}\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create account</CardTitle>\n                  <CardDescription>\n                    Create a new account to start managing your email campaigns\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={(e) => {\n                      e.preventDefault();\n                      registerForm.handleSubmit(onRegister)(e);\n                    }} className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <FormField\n                          control={registerForm.control}\n                          name=\"firstName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>First Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"John\"\n                                  data-testid=\"input-register-firstname\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={registerForm.control}\n                          name=\"lastName\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Last Name</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Doe\"\n                                  data-testid=\"input-register-lastname\"\n                                  {...field}\n                                  value={field.value || \"\"}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <FormField\n                        control={registerForm.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"email\"\n                                placeholder=\"john@example.com\"\n                                data-testid=\"input-register-email\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Create a strong password\"\n                                  data-testid=\"input-register-password\"\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  data-testid=\"button-toggle-password-register\"\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Confirm Password</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showConfirmPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Confirm your password\"\n                                  data-testid=\"input-register-confirm-password\"\n                                  {...field}\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                  data-testid=\"button-toggle-confirm-password\"\n                                >\n                                  {showConfirmPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        disabled={registerMutation.isPending}\n                        data-testid=\"button-register-submit\"\n                      >\n                        {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden lg:flex flex-1 bg-muted p-8 items-center justify-center\">\n        <div className=\"max-w-md text-center space-y-6\">\n          <h2 className=\"text-3xl font-bold\">Powerful Email Management</h2>\n          <p className=\"text-lg text-muted-foreground\">\n            Take control of your email campaigns with our comprehensive SES management platform.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 text-blue-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Mail className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Mass Email Sending</h3>\n                <p className=\"text-sm text-muted-foreground\">Send personalized emails to thousands</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-green-100 text-green-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <BarChart3 className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Advanced Analytics</h3>\n                <p className=\"text-sm text-muted-foreground\">Track opens, clicks, and engagement</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-purple-100 text-purple-600 w-10 h-10 rounded-lg flex items-center justify-center\">\n                <Shield className=\"w-5 h-5\" />\n              </div>\n              <div className=\"text-left\">\n                <h3 className=\"font-semibold\">Secure & Reliable</h3>\n                <p className=\"text-sm text-muted-foreground\">Enterprise-grade security and encryption</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16296},"server/services/emailService.ts":{"content":"import { storage } from '../storage';\nimport { awsService } from './awsService';\nimport { randomUUID } from 'crypto';\nimport type { InsertEmailSend } from '@shared/schema';\n\nexport interface SendSingleEmailRequest {\n  to: string;\n  subject: string;\n  content: string;\n  campaignId?: string;\n  from?: string;\n}\n\nexport interface SendBulkEmailRequest {\n  subject: string;\n  content: string;\n  recipientListId: string;\n  campaignId?: string;\n  from?: string;\n}\n\nexport class EmailService {\n  async sendSingleEmail(userId: string, request: SendSingleEmailRequest): Promise<string> {\n    await awsService.initialize(userId);\n\n    // Add tracking pixel to content\n    const trackingPixelId = randomUUID();\n    const trackingPixel = `<img src=\"${process.env.BASE_URL || 'http://localhost:5000'}/api/tracking/pixel/${trackingPixelId}\" width=\"1\" height=\"1\" style=\"display:none;\" alt=\"\" />`;\n    const contentWithTracking = request.content + trackingPixel;\n\n    try {\n      const messageId = await awsService.sendEmail({\n        to: [request.to],\n        subject: request.subject,\n        htmlBody: contentWithTracking,\n        from: request.from,\n      });\n\n      // Record the email send\n      const emailSend: InsertEmailSend = {\n        campaignId: request.campaignId,\n        recipientEmail: request.to,\n        subject: request.subject,\n        content: request.content,\n        status: 'sent',\n        messageId,\n        trackingPixelId,\n        sentAt: new Date(),\n      };\n\n      await storage.createEmailSend(emailSend);\n\n      return messageId;\n    } catch (error) {\n      console.error('Failed to send email:', error);\n      \n      // Record the failed send\n      const emailSend: InsertEmailSend = {\n        campaignId: request.campaignId,\n        recipientEmail: request.to,\n        subject: request.subject,\n        content: request.content,\n        status: 'failed',\n        trackingPixelId,\n      };\n\n      await storage.createEmailSend(emailSend);\n      \n      // Preserve the original error message for better user guidance\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to send email');\n    }\n  }\n\n  async sendBulkEmail(userId: string, request: SendBulkEmailRequest): Promise<void> {\n    await awsService.initialize(userId);\n\n    // Get recipients from the list\n    const recipients = await storage.getRecipients(request.recipientListId, userId);\n    \n    if (recipients.length === 0) {\n      throw new Error('No recipients found in the selected list');\n    }\n\n    // Process template variables in content\n    const emailSends: InsertEmailSend[] = [];\n\n    for (const recipient of recipients) {\n      if (!recipient.isActive) continue;\n\n      const trackingPixelId = randomUUID();\n      const trackingPixel = `<img src=\"${process.env.BASE_URL || 'http://localhost:5000'}/api/tracking/pixel/${trackingPixelId}\" width=\"1\" height=\"1\" style=\"display:none;\" alt=\"\" />`;\n      \n      // Replace template variables\n      let personalizedContent = request.content;\n      let personalizedSubject = request.subject;\n      \n      if (recipient.firstName) {\n        personalizedContent = personalizedContent.replace(/{{firstName}}/g, recipient.firstName);\n        personalizedSubject = personalizedSubject.replace(/{{firstName}}/g, recipient.firstName);\n      }\n      \n      if (recipient.lastName) {\n        personalizedContent = personalizedContent.replace(/{{lastName}}/g, recipient.lastName);\n        personalizedSubject = personalizedSubject.replace(/{{lastName}}/g, recipient.lastName);\n      }\n      \n      if (recipient.email) {\n        personalizedContent = personalizedContent.replace(/{{email}}/g, recipient.email);\n        personalizedSubject = personalizedSubject.replace(/{{email}}/g, recipient.email);\n      }\n\n      // Add metadata variables if available\n      if (recipient.metadata && typeof recipient.metadata === 'object') {\n        for (const [key, value] of Object.entries(recipient.metadata)) {\n          const regex = new RegExp(`{{${key}}}`, 'g');\n          personalizedContent = personalizedContent.replace(regex, String(value));\n          personalizedSubject = personalizedSubject.replace(regex, String(value));\n        }\n      }\n\n      const contentWithTracking = personalizedContent + trackingPixel;\n\n      try {\n        const messageId = await awsService.sendEmail({\n          to: [recipient.email],\n          subject: personalizedSubject,\n          htmlBody: contentWithTracking,\n          from: request.from,\n        });\n\n        emailSends.push({\n          campaignId: request.campaignId,\n          recipientEmail: recipient.email,\n          subject: personalizedSubject,\n          content: personalizedContent,\n          status: 'sent',\n          messageId,\n          trackingPixelId,\n          sentAt: new Date(),\n        });\n      } catch (error) {\n        console.error(`Failed to send email to ${recipient.email}:`, error);\n        \n        emailSends.push({\n          campaignId: request.campaignId,\n          recipientEmail: recipient.email,\n          subject: personalizedSubject,\n          content: personalizedContent,\n          status: 'failed',\n          trackingPixelId,\n        });\n      }\n    }\n\n    // Batch insert all email sends\n    for (const emailSend of emailSends) {\n      await storage.createEmailSend(emailSend);\n    }\n  }\n\n  async processTemplateVariables(content: string, variables: Record<string, string>): Promise<string> {\n    let processedContent = content;\n    \n    for (const [key, value] of Object.entries(variables)) {\n      const regex = new RegExp(`{{${key}}}`, 'g');\n      processedContent = processedContent.replace(regex, value);\n    }\n    \n    return processedContent;\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":5743},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { awsService } from \"./services/awsService\";\nimport { emailService } from \"./services/emailService\";\nimport { encrypt } from \"./services/encryptionService\";\nimport { \n  insertAwsCredentialsSchema,\n  insertEmailTemplateSchema,\n  insertRecipientListSchema,\n  insertEmailCampaignSchema \n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport multer from 'multer';\nimport csvParser from 'csv-parser';\nimport { Readable } from 'stream';\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\n// Request schemas\nconst sendEmailSchema = z.object({\n  to: z.string().email(),\n  subject: z.string().min(1),\n  content: z.string().min(1),\n  from: z.string().email(),\n});\n\nconst sendBulkEmailSchema = z.object({\n  subject: z.string().min(1),\n  content: z.string().min(1),\n  recipientListId: z.string(),\n  from: z.string().email(),\n});\n\nconst validateAwsCredentialsSchema = z.object({\n  region: z.string().min(1),\n  accessKeyId: z.string().min(1),\n  secretAccessKey: z.string().min(1),\n});\n\ninterface AuthenticatedRequest extends Request {\n  user?: any;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Based on blueprint:javascript_auth_all_persistance - Set up email/password authentication\n  setupAuth(app);\n\n  // Middleware to ensure user is authenticated\n  const isAuthenticated = (req: AuthenticatedRequest, res: Response, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    next();\n  };\n\n  // AWS Credentials routes\n  app.get('/api/aws/credentials', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n  const userId = req.user!.id;\n  const credentials = await storage.getAwsCredentials(userId);\n      \n      if (!credentials) {\n        return res.json({ connected: false });\n      }\n\n      res.json({\n        connected: true,\n        region: credentials.region,\n        // Never send encrypted keys to frontend\n      });\n    } catch (error) {\n      console.error(\"Error fetching AWS credentials:\", error);\n      res.status(500).json({ message: \"Failed to fetch AWS credentials\" });\n    }\n  });\n\n  app.post('/api/aws/credentials/validate', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const validation = validateAwsCredentialsSchema.parse(req.body);\n      const isValid = await awsService.validateCredentials(validation);\n      \n      res.json({ valid: isValid });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error validating AWS credentials:\", error);\n      res.status(500).json({ message: \"Failed to validate AWS credentials\" });\n    }\n  });\n\n  app.post('/api/aws/credentials', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertAwsCredentialsSchema.parse(req.body);\n\n      // Validate credentials first\n      const isValid = await awsService.validateCredentials({\n        region: data.region,\n        accessKeyId: data.encryptedAccessKey, // These are not encrypted yet\n        secretAccessKey: data.encryptedSecretKey,\n      });\n\n      if (!isValid) {\n        return res.status(400).json({ message: \"Invalid AWS credentials\" });\n      }\n\n      // Encrypt the credentials\n      const encryptedCredentials = {\n        ...data,\n        userId,\n        encryptedAccessKey: encrypt(data.encryptedAccessKey),\n        encryptedSecretKey: encrypt(data.encryptedSecretKey),\n      };\n\n      const credentials = await storage.upsertAwsCredentials(encryptedCredentials);\n\n      res.json({\n        connected: true,\n        region: credentials.region,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Failed to save AWS credentials:\", error);\n  res.status(500).json({ message: \"Failed to save AWS credentials\", error: typeof error === 'object' && error !== null && 'message' in error ? (error as any).message : String(error) });\n    }\n  });\n\n  app.delete('/api/aws/credentials', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await storage.deleteAwsCredentials(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting AWS credentials:\", error);\n      res.status(500).json({ message: \"Failed to delete AWS credentials\" });\n    }\n  });\n\n  // Get verified sender identities from AWS SES\n  app.get('/api/aws/verified-identities', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await awsService.initialize(userId);\n      const identities = await awsService.getVerifiedIdentities();\n      res.json({ identities });\n    } catch (error) {\n      console.error(\"Error fetching verified identities:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to fetch verified identities\";\n      \n      if (errorMessage.includes('AWS credentials not configured')) {\n        return res.status(400).json({ \n          message: errorMessage,\n          code: 'MISSING_AWS_CREDENTIALS',\n          identities: []\n        });\n      }\n      \n      res.status(500).json({ \n        message: errorMessage,\n        identities: []\n      });\n    }\n  });\n\n  // SES Identity Management routes\n  app.get('/api/ses/identities', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await awsService.initialize(userId);\n      const identities = await awsService.getAllIdentitiesWithStatus();\n      res.json({ identities });\n    } catch (error) {\n      console.error(\"Error fetching SES identities:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to fetch identities\";\n      res.status(500).json({ message: errorMessage, identities: [] });\n    }\n  });\n\n  app.post('/api/ses/domains', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { domain } = req.body;\n      \n      if (!domain) {\n        return res.status(400).json({ message: \"Domain is required\" });\n      }\n\n      await awsService.initialize(userId);\n      const result = await awsService.verifyDomainIdentity(domain);\n      \n      res.json({ \n        success: true, \n        domain,\n        verificationToken: result.verificationToken,\n        dkimTokens: result.dkimTokens\n      });\n    } catch (error) {\n      console.error(\"Error verifying domain:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to verify domain\";\n      res.status(500).json({ success: false, message: errorMessage });\n    }\n  });\n\n  app.post('/api/ses/emails', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { email } = req.body;\n      \n      if (!email) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      await awsService.initialize(userId);\n      await awsService.verifyEmailIdentity(email);\n      \n      res.json({ \n        success: true, \n        message: `Verification email sent to ${email}. Please check your inbox and click the verification link.`,\n        email\n      });\n    } catch (error) {\n      console.error(\"Error verifying email:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to verify email\";\n      res.status(500).json({ success: false, message: errorMessage });\n    }\n  });\n\n  app.get('/api/ses/domains/:domain/dkim', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { domain } = req.params;\n\n      await awsService.initialize(userId);\n      const dkimTokens = await awsService.getDomainDkimTokens(domain);\n      \n      res.json({ dkimTokens });\n    } catch (error) {\n      console.error(\"Error getting DKIM tokens:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to get DKIM tokens\";\n      res.status(500).json({ message: errorMessage, dkimTokens: [] });\n    }\n  });\n\n  app.delete('/api/ses/identities/:identity', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { identity } = req.params;\n\n      await awsService.initialize(userId);\n      await awsService.deleteIdentity(identity);\n      \n      res.json({ success: true, message: `Identity ${identity} deleted successfully` });\n    } catch (error) {\n      console.error(\"Error deleting identity:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to delete identity\";\n      res.status(500).json({ success: false, message: errorMessage });\n    }\n  });\n\n  app.get('/api/ses/quota', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      await awsService.initialize(userId);\n      const quota = await awsService.getSendingQuota();\n      \n      res.json(quota);\n    } catch (error) {\n      console.error(\"Error getting sending quota:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to get sending quota\";\n      res.status(500).json({ message: errorMessage });\n    }\n  });\n\n  app.post('/api/ses/send-test', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const { to, from } = req.body;\n      \n      if (!to || !from) {\n        return res.status(400).json({ message: \"Both 'to' and 'from' email addresses are required\" });\n      }\n\n      const messageId = await emailService.sendSingleEmail(userId, {\n        to,\n        from,\n        subject: 'Test Email from SES Manager',\n        content: '<h1>Test Email</h1><p>This is a test email sent from SES Manager. If you received this, your AWS SES configuration is working correctly!</p>',\n      });\n      \n      res.json({ \n        success: true, \n        message: 'Test email sent successfully',\n        messageId \n      });\n    } catch (error) {\n      console.error(\"Error sending test email:\", error);\n      const errorMessage = error instanceof Error ? error.message : \"Failed to send test email\";\n      res.status(500).json({ success: false, message: errorMessage });\n    }\n  });\n\n  // Email sending routes\n  app.post('/api/email/send', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = sendEmailSchema.parse(req.body);\n      const messageId = await emailService.sendSingleEmail(userId, data);\n      res.json({ success: true, messageId });\n    } catch (error) {\n      console.error(\"Error sending email:\", error);\n      \n      // Return more specific error messages to help users\n      const errorMessage = error instanceof Error ? error.message : \"Failed to send email\";\n      \n      // Determine appropriate HTTP status code based on error type\n      if (errorMessage.includes('AWS credentials not configured')) {\n        return res.status(400).json({ \n          success: false, \n          message: errorMessage,\n          code: 'MISSING_AWS_CREDENTIALS' \n        });\n      }\n      \n      if (errorMessage.includes('From email address is required')) {\n        return res.status(400).json({ \n          success: false, \n          message: errorMessage,\n          code: 'MISSING_FROM_EMAIL' \n        });\n      }\n      \n      if (errorMessage.includes('not verified') || errorMessage.includes('not authorized')) {\n        return res.status(400).json({ \n          success: false, \n          message: errorMessage,\n          code: 'SENDER_NOT_VERIFIED' \n        });\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: errorMessage,\n        code: 'SEND_FAILED'\n      });\n    }\n  });\n\n  // Bulk email sending route with error aggregation\n  app.post('/api/email/send-bulk', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = sendBulkEmailSchema.parse(req.body);\n      // campaignId can be passed optionally from frontend\n      const campaignId = req.body.campaignId || null;\n      let failed = 0;\n      let sent = 0;\n      let total = 0;\n      let failedEmails: string[] = [];\n      let sentEmails: string[] = [];\n      const recipients = await storage.getRecipients(data.recipientListId, userId);\n      total = recipients.length;\n      if (total === 0) {\n        return res.status(400).json({ success: false, message: \"No recipients found in the selected list\" });\n      }\n      for (const recipient of recipients) {\n        if (!recipient.isActive) continue;\n        try {\n          await emailService.sendSingleEmail(userId, {\n            to: recipient.email,\n            subject: data.subject,\n            content: data.content,\n            campaignId,\n            from: data.from,\n          });\n          sent++;\n          sentEmails.push(recipient.email);\n        } catch (err) {\n          failed++;\n          failedEmails.push(recipient.email);\n        }\n      }\n      let message = `Sent: ${sent}, Failed: ${failed}, Total: ${total}`;\n      if (sent === 0) {\n        return res.status(500).json({ success: false, message: \"All emails failed to send\", failedEmails });\n      }\n      if (failed > 0) {\n        return res.status(207).json({ success: false, message, sentEmails, failedEmails });\n      }\n      res.json({ success: true, message });\n    } catch (error) {\n      console.error(\"Error sending bulk email:\", error);\n      res.status(500).json({ success: false, message: \"Failed to send bulk email\", error: typeof error === 'object' && error !== null && 'message' in error ? (error as any).message : String(error) });\n    }\n  });\n  // Email templates routes\n  app.get('/api/templates', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const templates = await storage.getEmailTemplates(userId);\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Error fetching templates:\", error);\n      res.status(500).json({ message: \"Failed to fetch templates\" });\n    }\n  });\n\n  app.post('/api/templates', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertEmailTemplateSchema.parse(req.body);\n      \n      const template = await storage.createEmailTemplate({ ...data, userId });\n      res.json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating template:\", error);\n      res.status(500).json({ message: \"Failed to create template\" });\n    }\n  });\n\n  app.put('/api/templates/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const templateId = req.params.id;\n      const data = insertEmailTemplateSchema.partial().parse(req.body);\n      \n      const template = await storage.updateEmailTemplate(templateId, userId, data);\n      res.json(template);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error updating template:\", error);\n      res.status(500).json({ message: \"Failed to update template\" });\n    }\n  });\n\n  app.delete('/api/templates/:id', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const templateId = req.params.id;\n      \n      await storage.deleteEmailTemplate(templateId, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting template:\", error);\n      res.status(500).json({ message: \"Failed to delete template\" });\n    }\n  });\n\n  // Recipient lists routes\n  app.get('/api/recipient-lists', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const lists = await storage.getRecipientLists(userId);\n      res.json(lists);\n    } catch (error) {\n      console.error(\"Error fetching recipient lists:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipient lists\" });\n    }\n  });\n\n  app.post('/api/recipient-lists', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertRecipientListSchema.parse(req.body);\n      \n      const list = await storage.createRecipientList({ ...data, userId });\n      res.json(list);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating recipient list:\", error);\n      res.status(500).json({ message: \"Failed to create recipient list\" });\n    }\n  });\n\n  app.get('/api/recipient-lists/:id/recipients', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const listId = req.params.id;\n      \n      const recipients = await storage.getRecipients(listId, userId);\n      res.json(recipients);\n    } catch (error) {\n      console.error(\"Error fetching recipients:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipients\" });\n    }\n  });\n\n  app.post('/api/recipient-lists/:id/upload', isAuthenticated, upload.single('csv'), async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const listId = req.params.id;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"No CSV file uploaded\" });\n      }\n\n      // Verify the list belongs to the user\n      const list = await storage.getRecipientList(listId, userId);\n      if (!list) {\n        return res.status(404).json({ message: \"Recipient list not found\" });\n      }\n\n      // Parse CSV\n      const recipients: any[] = [];\n      const csvStream = Readable.from(req.file.buffer);\n      \n      await new Promise((resolve, reject) => {\n        csvStream\n          .pipe(csvParser())\n          .on('data', (data) => {\n            if (data.email) {\n              recipients.push({\n                listId,\n                email: data.email,\n                firstName: data.firstName || data.first_name || null,\n                lastName: data.lastName || data.last_name || null,\n                metadata: Object.keys(data).reduce((acc, key) => {\n                  if (!['email', 'firstName', 'first_name', 'lastName', 'last_name'].includes(key)) {\n                    acc[key] = data[key];\n                  }\n                  return acc;\n                }, {} as Record<string, any>),\n              });\n            }\n          })\n          .on('end', resolve)\n          .on('error', reject);\n      });\n\n      if (recipients.length === 0) {\n        return res.status(400).json({ message: \"No valid recipients found in CSV file\" });\n      }\n\n      // Clear existing recipients and add new ones\n      await storage.deleteRecipients(listId);\n      const createdRecipients = await storage.createRecipients(recipients);\n      \n      res.json({ \n        success: true, \n        count: createdRecipients.length,\n        message: `Successfully imported ${createdRecipients.length} recipients` \n      });\n    } catch (error) {\n      console.error(\"Error uploading recipients:\", error);\n      res.status(500).json({ message: \"Failed to upload recipients\" });\n    }\n  });\n\n  // Email campaigns routes\n  app.get('/api/campaigns', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const campaigns = await storage.getEmailCampaigns(userId);\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch campaigns\" });\n    }\n  });\n\n  app.post('/api/campaigns', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const data = insertEmailCampaignSchema.parse(req.body);\n      \n      const campaign = await storage.createEmailCampaign({ ...data, userId });\n      res.json(campaign);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid request data\", errors: error.errors });\n      }\n      console.error(\"Error creating campaign:\", error);\n      res.status(500).json({ message: \"Failed to create campaign\" });\n    }\n  });\n\n  // Email tracking routes\n  app.get('/api/email-sends', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      \n      const emailSends = await storage.getEmailSends(userId, limit);\n      res.json(emailSends);\n    } catch (error) {\n      console.error(\"Error fetching email sends:\", error);\n      res.status(500).json({ message: \"Failed to fetch email sends\" });\n    }\n  });\n\n  app.get('/api/analytics/stats', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const stats = await storage.getEmailStats(userId);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching email stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch email stats\" });\n    }\n  });\n\n  app.get('/api/analytics/timeseries', isAuthenticated, async (req: AuthenticatedRequest, res) => {\n    try {\n      const userId = req.user!.id;\n      const days = req.query.days ? parseInt(req.query.days as string) : 7;\n      const campaignId = req.query.campaignId as string | undefined;\n      \n      const timeseries = await storage.getEmailTimeSeriesData(userId, days, campaignId);\n      res.json(timeseries);\n    } catch (error) {\n      console.error(\"Error fetching time series data:\", error);\n      res.status(500).json({ message: \"Failed to fetch time series data\" });\n    }\n  });\n\n  // Tracking pixel endpoint (public)\n  app.get('/api/tracking/pixel/:trackingId', async (req: Request, res: Response) => {\n    try {\n      const trackingId = req.params.trackingId;\n      const emailSend = await storage.getEmailSendByTrackingPixel(trackingId);\n      \n      if (emailSend && !emailSend.openedAt) {\n        await storage.updateEmailSend(emailSend.id, { openedAt: new Date() });\n        await storage.createTrackingEvent({\n          emailSendId: emailSend.id,\n          eventType: 'open',\n          eventData: {\n            userAgent: req.get('User-Agent'),\n            ip: req.ip,\n          },\n        });\n      }\n\n      // Return a 1x1 transparent pixel\n      const pixel = Buffer.from([\n        0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x01, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0xF9, 0x04, 0x01, 0x00, 0x00, 0x00,\n        0x00, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x02, 0x02,\n        0x04, 0x01, 0x00, 0x3B\n      ]);\n\n      res.set({\n        'Content-Type': 'image/gif',\n        'Content-Length': pixel.length,\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      });\n      \n      res.send(pixel);\n    } catch (error) {\n      console.error(\"Error tracking email open:\", error);\n      res.status(500).send('Error');\n    }\n  });\n\n  // SNS webhook endpoint for SES notifications (public)\n  app.post('/api/sns/notifications', async (req: Request, res: Response) => {\n    try {\n      const notification = req.body;\n      \n      // Handle SES bounce, complaint, and delivery notifications\n      if (notification.Type === 'Notification') {\n        const message = JSON.parse(notification.Message);\n        \n        if (message.notificationType === 'Bounce') {\n          const messageId = message.mail.commonHeaders.messageId;\n          const emailSend = await storage.getEmailSendByMessageId(messageId);\n          \n          if (emailSend) {\n            await storage.updateEmailSend(emailSend.id, {\n              status: 'bounced',\n              bouncedAt: new Date(),\n              bounceReason: message.bounce.bounceType,\n            });\n            \n            await storage.createTrackingEvent({\n              emailSendId: emailSend.id,\n              eventType: 'bounce',\n              eventData: message.bounce,\n            });\n          }\n        } else if (message.notificationType === 'Complaint') {\n          const messageId = message.mail.commonHeaders.messageId;\n          const emailSend = await storage.getEmailSendByMessageId(messageId);\n          \n          if (emailSend) {\n            await storage.updateEmailSend(emailSend.id, {\n              status: 'complained',\n              complainedAt: new Date(),\n              complaintReason: message.complaint.complaintFeedbackType,\n            });\n            \n            await storage.createTrackingEvent({\n              emailSendId: emailSend.id,\n              eventType: 'complaint',\n              eventData: message.complaint,\n            });\n          }\n        } else if (message.notificationType === 'Delivery') {\n          const messageId = message.mail.commonHeaders.messageId;\n          const emailSend = await storage.getEmailSendByMessageId(messageId);\n          \n          if (emailSend) {\n            await storage.updateEmailSend(emailSend.id, {\n              status: 'delivered',\n              deliveredAt: new Date(),\n            });\n            \n            await storage.createTrackingEvent({\n              emailSendId: emailSend.id,\n              eventType: 'delivery',\n              eventData: message.delivery,\n            });\n          }\n        }\n      }\n      \n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"Error processing SNS notification:\", error);\n      res.status(500).send('Error');\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":26310},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { \n      server,\n      clientPort: 443,\n      port: 5000\n    },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mail, CheckCircle, Eye, AlertTriangle, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { EmailStats } from \"@/lib/types\";\n\nexport default function StatsCards() {\n  const { data: stats } = useQuery<EmailStats>({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const deliveryRate = stats?.totalSent ? ((stats.totalDelivered / stats.totalSent) * 100).toFixed(1) : \"0\";\n  const openRate = stats?.totalDelivered ? ((stats.totalOpened / stats.totalDelivered) * 100).toFixed(1) : \"0\";\n  const bounceRate = stats?.totalSent ? ((stats.totalBounced / stats.totalSent) * 100).toFixed(1) : \"0\";\n\n  const statsCards = [\n    {\n      title: \"Total Sent\",\n      value: stats?.totalSent?.toLocaleString() || \"0\",\n      icon: Mail,\n      iconColor: \"bg-blue-100 text-blue-600\",\n      trend: \"+12% from last month\",\n      trendDirection: \"up\" as const,\n      testId: \"stat-total-sent\"\n    },\n    {\n      title: \"Delivered\",\n      value: stats?.totalDelivered?.toLocaleString() || \"0\",\n      icon: CheckCircle,\n      iconColor: \"bg-green-100 text-green-600\",\n      trend: `${deliveryRate}% delivery rate`,\n      trendDirection: \"up\" as const,\n      testId: \"stat-delivered\"\n    },\n    {\n      title: \"Opens\",\n      value: stats?.totalOpened?.toLocaleString() || \"0\",\n      icon: Eye,\n      iconColor: \"bg-purple-100 text-purple-600\",\n      trend: `${openRate}% open rate`,\n      trendDirection: \"up\" as const,\n      testId: \"stat-opens\"\n    },\n    {\n      title: \"Bounces\",\n      value: stats?.totalBounced?.toLocaleString() || \"0\",\n      icon: AlertTriangle,\n      iconColor: \"bg-red-100 text-red-600\",\n      trend: `${bounceRate}% bounce rate`,\n      trendDirection: \"down\" as const,\n      testId: \"stat-bounces\"\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statsCards.map((stat) => {\n        const Icon = stat.icon;\n        const TrendIcon = stat.trendDirection === \"up\" ? TrendingUp : TrendingDown;\n        const trendColor = stat.trendDirection === \"up\" ? \"text-green-600\" : \"text-red-600\";\n        \n        return (\n          <Card key={stat.title}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                {stat.title}\n              </CardTitle>\n              <div className={`p-3 rounded-lg ${stat.iconColor}`}>\n                <Icon className=\"w-4 h-4\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-foreground\" data-testid={stat.testId}>\n                {stat.value}\n              </div>\n              <div className={`mt-4 flex items-center ${trendColor}`}>\n                <TrendIcon className=\"w-3 h-3 mr-1\" />\n                <span className=\"text-sm\">{stat.trend}</span>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":3102},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/domains.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Globe, \n  Plus, \n  CheckCircle2, \n  Clock, \n  AlertCircle, \n  Copy, \n  Trash2,\n  RefreshCw,\n  Info\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function Domains() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [newDomain, setNewDomain] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [selectedDomain, setSelectedDomain] = useState<any>(null);\n  const [domainDkimTokens, setDomainDkimTokens] = useState<Record<string, string[]>>({});\n\n  const { data: identities, isLoading: identitiesLoading, refetch: refetchIdentities } = useQuery<{\n    identities: Array<{\n      identity: string;\n      type: 'email' | 'domain';\n      status: string;\n      verificationToken?: string;\n    }>;\n  }>({\n    queryKey: [\"/api/ses/identities\"],\n    enabled: !!user,\n  });\n\n  const addDomainMutation = useMutation({\n    mutationFn: async (domain: string) => {\n      const res = await apiRequest(\"POST\", \"/api/ses/domains\", { domain });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Domain Added\",\n        description: `Verification started for ${data.domain}`,\n      });\n      setSelectedDomain(data);\n      if (data.dkimTokens && data.dkimTokens.length > 0) {\n        setDomainDkimTokens(prev => ({\n          ...prev,\n          [data.domain]: data.dkimTokens\n        }));\n      }\n      setIsAddDialogOpen(false);\n      setNewDomain(\"\");\n      refetchIdentities();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteDomainMutation = useMutation({\n    mutationFn: async (identity: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/ses/identities/${encodeURIComponent(identity)}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Domain Deleted\",\n        description: \"The domain has been removed from AWS SES\",\n      });\n      refetchIdentities();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const domains = identities?.identities?.filter(i => i.type === 'domain') || [];\n\n  const copyToClipboard = (text: string) => {\n    navigator.clipboard.writeText(text);\n    toast({\n      title: \"Copied\",\n      description: \"Text copied to clipboard\",\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    if (status === 'Success') {\n      return (\n        <Badge variant=\"default\" className=\"bg-green-500\">\n          <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n          Verified\n        </Badge>\n      );\n    } else if (status === 'Pending') {\n      return (\n        <Badge variant=\"secondary\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge variant=\"destructive\">\n          <AlertCircle className=\"w-3 h-3 mr-1\" />\n          Failed\n        </Badge>\n      );\n    }\n  };\n\n  const handleAddDomain = () => {\n    if (!newDomain) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a domain name\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addDomainMutation.mutate(newDomain);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Domain Management\" \n          description=\"Verify domains to send emails from any address on that domain\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Domains</h2>\n              <p className=\"text-muted-foreground\">Manage your verified sending domains</p>\n            </div>\n            \n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-domain\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Domain\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add Domain</DialogTitle>\n                  <DialogDescription>\n                    Enter the domain you want to verify for sending emails\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4 pt-4\">\n                  <div>\n                    <Input\n                      placeholder=\"example.com\"\n                      value={newDomain}\n                      onChange={(e) => setNewDomain(e.target.value)}\n                      data-testid=\"input-domain\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleAddDomain} \n                    className=\"w-full\"\n                    disabled={addDomainMutation.isPending}\n                    data-testid=\"button-submit-domain\"\n                  >\n                    {addDomainMutation.isPending ? \"Adding...\" : \"Add Domain\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              After adding a domain, you'll need to add DNS records to verify ownership. \n              The records will be displayed below once you add a domain.\n            </AlertDescription>\n          </Alert>\n\n          {identitiesLoading ? (\n            <div className=\"text-center py-8\">\n              <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-muted-foreground\" />\n              <p className=\"text-muted-foreground\">Loading domains...</p>\n            </div>\n          ) : domains.length === 0 ? (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center py-12\">\n                  <Globe className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-20\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Domains Yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Add your first domain to start sending emails from any address on that domain\n                  </p>\n                  <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-add-first-domain\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Your First Domain\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"space-y-4\">\n              {domains.map((domain) => (\n                <Card key={domain.identity} data-testid={`card-domain-${domain.identity}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Globe className=\"w-5 h-5\" />\n                        <div>\n                          <CardTitle>{domain.identity}</CardTitle>\n                          <CardDescription>Domain identity</CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {getStatusBadge(domain.status)}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-${domain.identity}`}>\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Domain</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {domain.identity}? \n                                You won't be able to send emails from this domain anymore.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteDomainMutation.mutate(domain.identity)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  {domain.verificationToken && (\n                    <CardContent className=\"space-y-6\">\n                      {/* Domain Verification TXT Record */}\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">1. Domain Verification (TXT Record)</h4>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          Add this TXT record to your DNS settings to verify domain ownership:\n                        </p>\n                        <div className=\"bg-muted p-3 rounded-md space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs text-muted-foreground\">Name/Host:</p>\n                              <code className=\"text-sm font-mono\" data-testid={`txt-name-${domain.identity}`}>\n                                _amazonses.{domain.identity}\n                              </code>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => copyToClipboard(`_amazonses.${domain.identity}`)}\n                              data-testid={`button-copy-name-${domain.identity}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs text-muted-foreground\">Value:</p>\n                              <code className=\"text-sm font-mono break-all\" data-testid={`txt-value-${domain.identity}`}>\n                                {domain.verificationToken}\n                              </code>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => copyToClipboard(domain.verificationToken!)}\n                              data-testid={`button-copy-value-${domain.identity}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Type: TXT</p>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* SPF Record */}\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">2. SPF Record (TXT Record)</h4>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          Add this SPF record to authorize AWS SES to send emails from your domain:\n                        </p>\n                        <div className=\"bg-muted p-3 rounded-md space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs text-muted-foreground\">Name/Host:</p>\n                              <code className=\"text-sm font-mono\" data-testid={`spf-name-${domain.identity}`}>\n                                {domain.identity}\n                              </code>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => copyToClipboard(domain.identity)}\n                              data-testid={`button-copy-spf-name-${domain.identity}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex-1\">\n                              <p className=\"text-xs text-muted-foreground\">Value:</p>\n                              <code className=\"text-sm font-mono break-all\" data-testid={`spf-value-${domain.identity}`}>\n                                v=spf1 include:amazonses.com ~all\n                              </code>\n                            </div>\n                            <Button \n                              variant=\"ghost\" \n                              size=\"sm\"\n                              onClick={() => copyToClipboard('v=spf1 include:amazonses.com ~all')}\n                              data-testid={`button-copy-spf-value-${domain.identity}`}\n                            >\n                              <Copy className=\"w-4 h-4\" />\n                            </Button>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-muted-foreground\">Type: TXT</p>\n                          </div>\n                        </div>\n                        <Alert className=\"mt-3\">\n                          <Info className=\"h-4 w-4\" />\n                          <AlertDescription className=\"text-sm\">\n                            If you already have an SPF record, add <code className=\"text-xs\">include:amazonses.com</code> before the final mechanism (~all or -all).\n                          </AlertDescription>\n                        </Alert>\n                      </div>\n\n                      {/* DKIM CNAME Records */}\n                      {domainDkimTokens[domain.identity] && domainDkimTokens[domain.identity].length > 0 && (\n                        <div>\n                          <h4 className=\"font-semibold mb-2\">3. DKIM Records (CNAME)</h4>\n                          <p className=\"text-sm text-muted-foreground mb-3\">\n                            Add these CNAME records for email authentication and spam prevention:\n                          </p>\n                          {domainDkimTokens[domain.identity].map((token, index) => (\n                            <div key={index} className=\"bg-muted p-3 rounded-md space-y-2 mb-3\">\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex-1\">\n                                  <p className=\"text-xs text-muted-foreground\">Name/Host:</p>\n                                  <code className=\"text-sm font-mono break-all\" data-testid={`dkim-name-${domain.identity}-${index}`}>\n                                    {token}._domainkey.{domain.identity}\n                                  </code>\n                                </div>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => copyToClipboard(`${token}._domainkey.${domain.identity}`)}\n                                  data-testid={`button-copy-dkim-name-${domain.identity}-${index}`}\n                                >\n                                  <Copy className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex-1\">\n                                  <p className=\"text-xs text-muted-foreground\">Value:</p>\n                                  <code className=\"text-sm font-mono break-all\" data-testid={`dkim-value-${domain.identity}-${index}`}>\n                                    {token}.dkim.amazonses.com\n                                  </code>\n                                </div>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => copyToClipboard(`${token}.dkim.amazonses.com`)}\n                                  data-testid={`button-copy-dkim-value-${domain.identity}-${index}`}\n                                >\n                                  <Copy className=\"w-4 h-4\" />\n                                </Button>\n                              </div>\n                              <div>\n                                <p className=\"text-xs text-muted-foreground\">Type: CNAME</p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n\n                      {/* SNS Webhook Configuration */}\n                      <div>\n                        <h4 className=\"font-semibold mb-2\">4. Bounce & Complaint Tracking (Optional)</h4>\n                        <p className=\"text-sm text-muted-foreground mb-3\">\n                          Configure AWS SNS to track bounces and complaints:\n                        </p>\n                        <div className=\"bg-muted p-3 rounded-md space-y-3\">\n                          <div>\n                            <p className=\"text-xs text-muted-foreground mb-2\">Webhook URL:</p>\n                            <div className=\"flex items-center gap-2\">\n                              <code className=\"text-sm font-mono flex-1 break-all\" data-testid={`webhook-url-${domain.identity}`}>\n                                {window.location.origin}/api/sns/notifications\n                              </code>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                onClick={() => copyToClipboard(`${window.location.origin}/api/sns/notifications`)}\n                                data-testid={`button-copy-webhook-${domain.identity}`}\n                              >\n                                <Copy className=\"w-4 h-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                          <Alert>\n                            <Info className=\"h-4 w-4\" />\n                            <AlertDescription className=\"text-sm\">\n                              <ol className=\"list-decimal list-inside space-y-1 mt-2\">\n                                <li>Go to AWS SNS Console and create topics for \"Bounces\" and \"Complaints\"</li>\n                                <li>Subscribe this webhook URL to both topics (HTTPS subscription)</li>\n                                <li>In AWS SES, configure your domain to publish bounce and complaint notifications to these SNS topics</li>\n                              </ol>\n                            </AlertDescription>\n                          </Alert>\n                        </div>\n                      </div>\n                      \n                      <Alert>\n                        <Info className=\"h-4 w-4\" />\n                        <AlertDescription className=\"text-sm\">\n                          After adding all DNS records, it may take up to 72 hours for verification to complete. \n                          You can refresh this page to check the status.\n                        </AlertDescription>\n                      </Alert>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":22061},"client/src/pages/ses-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Mail, Globe, CheckCircle2, Clock, AlertCircle, Plus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function SESDashboard() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n\n  const { data: identities, isLoading: identitiesLoading, refetch: refetchIdentities } = useQuery<{\n    identities: Array<{\n      identity: string;\n      type: 'email' | 'domain';\n      status: string;\n      verificationToken?: string;\n    }>;\n  }>({\n    queryKey: [\"/api/ses/identities\"],\n    enabled: !!user,\n  });\n\n  const { data: quota, isLoading: quotaLoading } = useQuery<{\n    max24HourSend: number;\n    maxSendRate: number;\n    sentLast24Hours: number;\n  }>({\n    queryKey: [\"/api/ses/quota\"],\n    enabled: !!user,\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const verifiedIdentities = identities?.identities?.filter(i => i.status === 'Success') || [];\n  const pendingIdentities = identities?.identities?.filter(i => i.status !== 'Success') || [];\n  const verifiedDomains = verifiedIdentities.filter(i => i.type === 'domain');\n  const verifiedEmails = verifiedIdentities.filter(i => i.type === 'email');\n\n  const getStatusBadge = (status: string) => {\n    if (status === 'Success') {\n      return (\n        <Badge variant=\"default\" className=\"bg-green-500\" data-testid={`badge-verified`}>\n          <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n          Verified\n        </Badge>\n      );\n    } else if (status === 'Pending') {\n      return (\n        <Badge variant=\"secondary\" data-testid={`badge-pending`}>\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge variant=\"destructive\" data-testid={`badge-failed`}>\n          <AlertCircle className=\"w-3 h-3 mr-1\" />\n          Failed\n        </Badge>\n      );\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"SES Dashboard\" \n          description=\"Manage your AWS SES identities and monitor sending limits\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card data-testid=\"card-quota\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  24-Hour Sending Limit\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {quotaLoading ? (\n                  <div className=\"text-2xl font-bold\">Loading...</div>\n                ) : (\n                  <div>\n                    <div className=\"text-2xl font-bold\" data-testid=\"text-quota-limit\">\n                      {quota?.max24HourSend || 0}\n                    </div>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {quota?.sentLast24Hours || 0} sent in last 24 hours\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-verified-domains\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Verified Domains\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-domain-count\">\n                  {verifiedDomains.length}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Active sending domains\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card data-testid=\"card-verified-emails\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-muted-foreground\">\n                  Verified Emails\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\" data-testid=\"text-email-count\">\n                  {verifiedEmails.length}\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Individual verified addresses\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Globe className=\"w-5 h-5\" />\n                      Domain Identities\n                    </CardTitle>\n                    <CardDescription>\n                      Verify domains to send from any email address on that domain\n                    </CardDescription>\n                  </div>\n                  <Link href=\"/domains\">\n                    <Button size=\"sm\" data-testid=\"button-manage-domains\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Domain\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {identitiesLoading ? (\n                  <div className=\"text-center py-4\">Loading identities...</div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {identities?.identities?.filter(i => i.type === 'domain').length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <Globe className=\"w-12 h-12 mx-auto mb-3 opacity-20\" />\n                        <p className=\"text-sm\">No domains verified yet</p>\n                        <Link href=\"/domains\">\n                          <Button variant=\"link\" size=\"sm\" className=\"mt-2\">\n                            Add your first domain\n                          </Button>\n                        </Link>\n                      </div>\n                    ) : (\n                      identities?.identities\n                        ?.filter(i => i.type === 'domain')\n                        .slice(0, 5)\n                        .map((identity) => (\n                          <div \n                            key={identity.identity} \n                            className=\"flex items-center justify-between p-3 border rounded-lg\"\n                            data-testid={`domain-${identity.identity}`}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <Globe className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">{identity.identity}</span>\n                            </div>\n                            {getStatusBadge(identity.status)}\n                          </div>\n                        ))\n                    )}\n                    {(identities?.identities?.filter(i => i.type === 'domain').length || 0) > 5 && (\n                      <Link href=\"/domains\">\n                        <Button variant=\"link\" size=\"sm\" className=\"w-full\">\n                          View all domains\n                        </Button>\n                      </Link>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Mail className=\"w-5 h-5\" />\n                      Email Identities\n                    </CardTitle>\n                    <CardDescription>\n                      Verify individual email addresses for sending\n                    </CardDescription>\n                  </div>\n                  <Link href=\"/email-verification\">\n                    <Button size=\"sm\" data-testid=\"button-verify-email\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Email\n                    </Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {identitiesLoading ? (\n                  <div className=\"text-center py-4\">Loading identities...</div>\n                ) : (\n                  <div className=\"space-y-3\">\n                    {identities?.identities?.filter(i => i.type === 'email').length === 0 ? (\n                      <div className=\"text-center py-8 text-muted-foreground\">\n                        <Mail className=\"w-12 h-12 mx-auto mb-3 opacity-20\" />\n                        <p className=\"text-sm\">No emails verified yet</p>\n                        <Link href=\"/email-verification\">\n                          <Button variant=\"link\" size=\"sm\" className=\"mt-2\">\n                            Verify your first email\n                          </Button>\n                        </Link>\n                      </div>\n                    ) : (\n                      identities?.identities\n                        ?.filter(i => i.type === 'email')\n                        .slice(0, 5)\n                        .map((identity) => (\n                          <div \n                            key={identity.identity} \n                            className=\"flex items-center justify-between p-3 border rounded-lg\"\n                            data-testid={`email-${identity.identity}`}\n                          >\n                            <div className=\"flex items-center gap-3\">\n                              <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                              <span className=\"font-medium\">{identity.identity}</span>\n                            </div>\n                            {getStatusBadge(identity.status)}\n                          </div>\n                        ))\n                    )}\n                    {(identities?.identities?.filter(i => i.type === 'email').length || 0) > 5 && (\n                      <Link href=\"/email-verification\">\n                        <Button variant=\"link\" size=\"sm\" className=\"w-full\">\n                          View all emails\n                        </Button>\n                      </Link>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {pendingIdentities.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  Pending Verifications\n                </CardTitle>\n                <CardDescription>\n                  These identities are waiting for verification\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {pendingIdentities.map((identity) => (\n                    <div \n                      key={identity.identity} \n                      className=\"flex items-center justify-between p-3 border rounded-lg\"\n                      data-testid={`pending-${identity.identity}`}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        {identity.type === 'domain' ? (\n                          <Globe className=\"w-4 h-4 text-muted-foreground\" />\n                        ) : (\n                          <Mail className=\"w-4 h-4 text-muted-foreground\" />\n                        )}\n                        <span className=\"font-medium\">{identity.identity}</span>\n                      </div>\n                      {getStatusBadge(identity.status)}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12966},"client/src/pages/email-verification.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { \n  Mail, \n  Plus, \n  CheckCircle2, \n  Clock, \n  AlertCircle, \n  Trash2,\n  RefreshCw,\n  Info,\n  Send\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\n\nexport default function EmailVerification() {\n  const { toast } = useToast();\n  const { user, isLoading } = useAuth();\n  const [newEmail, setNewEmail] = useState(\"\");\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n\n  const { data: identities, isLoading: identitiesLoading, refetch: refetchIdentities } = useQuery<{\n    identities: Array<{\n      identity: string;\n      type: 'email' | 'domain';\n      status: string;\n    }>;\n  }>({\n    queryKey: [\"/api/ses/identities\"],\n    enabled: !!user,\n  });\n\n  const addEmailMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/ses/emails\", { email });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Verification Email Sent\",\n        description: data.message || \"Please check your inbox for the verification link\",\n      });\n      setIsAddDialogOpen(false);\n      setNewEmail(\"\");\n      refetchIdentities();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteEmailMutation = useMutation({\n    mutationFn: async (identity: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/ses/identities/${encodeURIComponent(identity)}`);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Email Deleted\",\n        description: \"The email address has been removed from AWS SES\",\n      });\n      refetchIdentities();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resendVerificationMutation = useMutation({\n    mutationFn: async (email: string) => {\n      const res = await apiRequest(\"POST\", \"/api/ses/emails\", { email });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Verification Email Resent\",\n        description: \"Please check your inbox for the verification link\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen items-center justify-center\">\n        <div className=\"text-lg\">Loading...</div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const emails = identities?.identities?.filter(i => i.type === 'email') || [];\n\n  const getStatusBadge = (status: string) => {\n    if (status === 'Success') {\n      return (\n        <Badge variant=\"default\" className=\"bg-green-500\">\n          <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n          Verified\n        </Badge>\n      );\n    } else if (status === 'Pending') {\n      return (\n        <Badge variant=\"secondary\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          Pending\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge variant=\"destructive\">\n          <AlertCircle className=\"w-3 h-3 mr-1\" />\n          Failed\n        </Badge>\n      );\n    }\n  };\n\n  const handleAddEmail = () => {\n    if (!newEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter an email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(newEmail)) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    addEmailMutation.mutate(newEmail);\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 overflow-auto\">\n        <Header \n          title=\"Email Verification\" \n          description=\"Verify individual email addresses for sending\"\n        />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h2 className=\"text-2xl font-bold\">Email Addresses</h2>\n              <p className=\"text-muted-foreground\">Manage your verified sender email addresses</p>\n            </div>\n            \n            <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-email\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Email\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add Email Address</DialogTitle>\n                  <DialogDescription>\n                    Enter the email address you want to verify for sending emails\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4 pt-4\">\n                  <div>\n                    <Input\n                      type=\"email\"\n                      placeholder=\"your-email@example.com\"\n                      value={newEmail}\n                      onChange={(e) => setNewEmail(e.target.value)}\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleAddEmail} \n                    className=\"w-full\"\n                    disabled={addEmailMutation.isPending}\n                    data-testid=\"button-submit-email\"\n                  >\n                    {addEmailMutation.isPending ? \"Sending...\" : \"Send Verification Email\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Alert>\n            <Info className=\"h-4 w-4\" />\n            <AlertDescription>\n              After adding an email address, AWS SES will send a verification link to that address. \n              Click the link to verify ownership before you can send emails from it.\n            </AlertDescription>\n          </Alert>\n\n          {identitiesLoading ? (\n            <div className=\"text-center py-8\">\n              <RefreshCw className=\"w-8 h-8 animate-spin mx-auto mb-4 text-muted-foreground\" />\n              <p className=\"text-muted-foreground\">Loading email addresses...</p>\n            </div>\n          ) : emails.length === 0 ? (\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"text-center py-12\">\n                  <Mail className=\"w-16 h-16 mx-auto mb-4 text-muted-foreground opacity-20\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Email Addresses Yet</h3>\n                  <p className=\"text-muted-foreground mb-6\">\n                    Add your first email address to start sending emails\n                  </p>\n                  <Button onClick={() => setIsAddDialogOpen(true)} data-testid=\"button-add-first-email\">\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Your First Email\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 gap-4\">\n              {emails.map((email) => (\n                <Card key={email.identity} data-testid={`card-email-${email.identity}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Mail className=\"w-5 h-5\" />\n                        <div>\n                          <CardTitle>{email.identity}</CardTitle>\n                          <CardDescription>Email identity</CardDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        {getStatusBadge(email.status)}\n                        {email.status === 'Pending' && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\"\n                            onClick={() => resendVerificationMutation.mutate(email.identity)}\n                            disabled={resendVerificationMutation.isPending}\n                            data-testid={`button-resend-${email.identity}`}\n                          >\n                            <Send className=\"w-4 h-4 mr-2\" />\n                            Resend\n                          </Button>\n                        )}\n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\" data-testid={`button-delete-${email.identity}`}>\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Email</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete {email.identity}? \n                                You won't be able to send emails from this address anymore.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteEmailMutation.mutate(email.identity)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  {email.status === 'Pending' && (\n                    <CardContent>\n                      <Alert>\n                        <Clock className=\"h-4 w-4\" />\n                        <AlertDescription>\n                          Verification email sent to {email.identity}. Please check your inbox and click the verification link. \n                          It may take a few minutes to arrive.\n                        </AlertDescription>\n                      </Alert>\n                    </CardContent>\n                  )}\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12280}},"version":2}